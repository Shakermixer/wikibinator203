SimpleGraphicsExample#(λ [age height width]
	[the V copies params into Treemap that fo/IfElse/etc uses "V_[...]" does "(V (_ [...]))"] V_[
	=[,numBytes *[.height .width ,4]]
	=[,pix <NewBytes .numBytes>]
	=[,red ,0]
	=[,green ,1]
	=[,blue ,2]
	=[,i ,0]	
	Fo[,y .height
		Fo[,x .width
			=[,pix +[.i .red] &[,255 +[.x *[.age ,35]]]]
			=[,pix +[.i .green] &[,255 +[.x *[.y .age]]]]
			=[,pix +[.i .green] &[,255 *[,333 /[.x .y]]]]
			+=[,i ,4] //next pixel
		]
	]
	.pix //gets pix then calls it on the Treemap state.
])

















old........


//todo swap some of the {} and [] and (), cuz here i'm using [x y] to mean {,x y},
//but thats less of a problem in the tree UI.

SimpleGraphicsExample#(λ [age height width]
	[
		[the x[...] syntax means (x [...]), where [...] is an infcurList,
			and can be used to define custom syntaxes, where x is any func.
				This normally takes a second Treemap param.
			TODO "λ [age height width]" takes a [allparamsexceptlast lastparam] param,
				but maybe instead should somehow be merged with the Treemap way of doing params?
			The most general way to define new syntaxs is VarargAx,
				but its expensive to verify since if its a lie it may cost infinite time to verify,
				and if its true then all the calculations in it have to be repeated to verify but is finite.
				VarargAx is also harder to optimize since its defined as evaling after every param
					since it needs to decide if its had enuf params yet or not.
					
			Consider that in the tree/rectangles UI, there is no x[...] syntax
			and it will display it as (x [...]).
		]
		[age is seconds since it started as a double.]
		[this returns a blob of pixels to copy into html5 canvas.]
		[todo change the λ opcode to have a place for a comment (...).]
		[OLD: new syntax.. ;]
		[OLD: '{}' call ;]
		[OLD: '()' infcur. (this means (you can write) whatever (you want (in parens)) and its just data but [+ ,5] is still a func that adds 5 to its param). ;]
		[OLD: '[]' sCurryListWithTOfFirst ;]
		[OLD: '<>' sCurryList ;]
		[(? a) is written as ?a but (?? a b) is written that long way as itself. should it be a.b ?]
	]
	{
		?pix //get pix from what it forkEdits [...state...] to be, and return it.
		{
			_[
				=[numBytes *[?height ?width ,4]]
				=[pix {,NewBytes ?numBytes}]
				=[i ,0]
				=[red ,0]
				=[green ,1]
				=[blue ,2]
				
				(Fo y ?height _[
					(Fo x ?width _[
						the same line of code in different syntaxes...
						=[pix +[?i ?red] {,& +[?x *[?age ,35]] 255})]
						=(pix +(?i ?red) [& +(?x *(?age ,35)) 255])
						bytes[i+RED] = (x+age*35)&255;
						<bytes[i+RED] = (x+age*35)&255>
						<?bytes ?i ?red ,+ ?x ?age ,+ ,35 ,* ,255 ,& ,=> wait this mixed up + and * levels.
						<?x ?age ,+ ,35 ,* ,255 ,&>
						//`,*`?x ?age ,*
						
						
						
						+=[i ,4] //next pixel
					
						/*F'//bytes[i+RED] = (x+age*35)&255;'
						=(pix +(?i ?red) [& +(?x *(?age ,35)) 255])
						
						F'//bytes[i+GREEN] = (x+y*age)&255;'
						=(pix +(?i ?green) [& +(?x *(?y ?age)) 255])
						
						F'//bytes[i+BLUE] = (333*x/y)&255;'
						=( pix +(?i ?green) [& *( ,333 [/ ?x ?y]) 255] )
						
						
						+=(i ,4) //next pixel
						*/
					])
					+=[i *[?w ,4]] //row of pixels. FIXME should it be '?i' or 'i'?
				])
			]
			LambdaParams //start with [...state...] of the λ's params.
		}
	}
)

/*
//age in seconds since transition started. Just paints onto ByteRect
var doGraphicsDtAgeByterect = function(dt, age, byteRect){

	let bytes = byteRect.bytes;
	let offset = Math.floor(Math.sin(time()*5*2*Math.PI)*100+100);
	let w = byteRect.width;
	let h = byteRect.height;
	let cx = Math.floor(w/2); //center x
	let cy = Math.floor(h/2); //center y
	for(let i=0; i<bytes.length; i+=4){
		bytes[i+RED] = backgroundRed;
		bytes[i+GREEN] = backgroundGreen;
		bytes[i+BLUE] = backgroundBlue;
		bytes[i+ALPHA] = 255;
	}
	let i = 0;
	for(let y=0; y<h; y++){
		for(let x=0; x<w; x++){
			bytes[i+RED] = (x+age*35)&255;
			bytes[i+GREEN] = (x+y*age)&255;
			bytes[i+BLUE] = (333*x/y)&255;
			i += 4;
		}
		i += w*4; //row of pixels
	}

};
*/

]