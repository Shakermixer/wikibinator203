Wikibinator203VM.js:3148 Wikibinator203VM loglev=1
Wikibinator203VM.js:3274 Wikibinator203 VM detected littleEndian and will use that for overlapping .buffer in Uint8Array, Int32Array, Float32Array, Float64Array, etc. Despite that bigEndian is how people usually write things, most hardware seems to be littleEndian.
Wikibinator203VM.js:6557 Add op Evaling o8=0 curriesLeft=0 description:  opcode 0 (of 0-255). This is either never used or only in some implementations. Lambdas cant see it since its not halted. If you want a lazyeval that lambdas can see, thats one of the opcodes (TODO) or derive a lambda of 3 params that calls the first on the second when it gets and ignores the third param which would normally be u, and returns what (thefirst thesecond) returns.
Wikibinator203VM.js:6557 Add op U o8=1 curriesLeft=7 description: the universal lambda aka wikibinator203. opcode 1 (of 0-255). There are an infinite number of other possible universal lambdas but that would be a different system. They can all emulate eachother, if they are within the turingComplete cardinality (below hypercomputing etc), aka all calculations of finite time and memory, but sometimes an emulator in an emulator... is slow, even with evaler optimizations.
Wikibinator203VM.js:6557 Add op Op10 o8=2 curriesLeft=6 description: Op10 has 1 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11 o8=3 curriesLeft=6 description: Op11 has 1 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100 o8=4 curriesLeft=5 description: Op100 has 2 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101 o8=5 curriesLeft=5 description: Op101 has 2 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110 o8=6 curriesLeft=5 description: Op110 has 2 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111 o8=7 curriesLeft=5 description: Op111 has 2 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000 o8=8 curriesLeft=4 description: Op1000 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1001 o8=9 curriesLeft=4 description: Op1001 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1010 o8=10 curriesLeft=4 description: Op1010 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1011 o8=11 curriesLeft=4 description: Op1011 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100 o8=12 curriesLeft=4 description: Op1100 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101 o8=13 curriesLeft=4 description: Op1101 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110 o8=14 curriesLeft=4 description: Op1110 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111 o8=15 curriesLeft=4 description: Op1111 has 3 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10000 o8=16 curriesLeft=3 description: Op10000 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10001 o8=17 curriesLeft=3 description: Op10001 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10010 o8=18 curriesLeft=3 description: Op10010 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10011 o8=19 curriesLeft=3 description: Op10011 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10100 o8=20 curriesLeft=3 description: Op10100 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10101 o8=21 curriesLeft=3 description: Op10101 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10110 o8=22 curriesLeft=3 description: Op10110 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op10111 o8=23 curriesLeft=3 description: Op10111 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11000 o8=24 curriesLeft=3 description: Op11000 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11001 o8=25 curriesLeft=3 description: Op11001 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11010 o8=26 curriesLeft=3 description: Op11010 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11011 o8=27 curriesLeft=3 description: Op11011 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11100 o8=28 curriesLeft=3 description: Op11100 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11101 o8=29 curriesLeft=3 description: Op11101 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11110 o8=30 curriesLeft=3 description: Op11110 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op11111 o8=31 curriesLeft=3 description: Op11111 has 4 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100000 o8=32 curriesLeft=2 description: Op100000 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100001 o8=33 curriesLeft=2 description: Op100001 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100010 o8=34 curriesLeft=2 description: Op100010 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100011 o8=35 curriesLeft=2 description: Op100011 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100100 o8=36 curriesLeft=2 description: Op100100 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100101 o8=37 curriesLeft=2 description: Op100101 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100110 o8=38 curriesLeft=2 description: Op100110 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op100111 o8=39 curriesLeft=2 description: Op100111 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101000 o8=40 curriesLeft=2 description: Op101000 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101001 o8=41 curriesLeft=2 description: Op101001 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101010 o8=42 curriesLeft=2 description: Op101010 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101011 o8=43 curriesLeft=2 description: Op101011 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101100 o8=44 curriesLeft=2 description: Op101100 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101101 o8=45 curriesLeft=2 description: Op101101 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101110 o8=46 curriesLeft=2 description: Op101110 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op101111 o8=47 curriesLeft=2 description: Op101111 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110000 o8=48 curriesLeft=2 description: Op110000 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110001 o8=49 curriesLeft=2 description: Op110001 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110010 o8=50 curriesLeft=2 description: Op110010 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110011 o8=51 curriesLeft=2 description: Op110011 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110100 o8=52 curriesLeft=2 description: Op110100 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110101 o8=53 curriesLeft=2 description: Op110101 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110110 o8=54 curriesLeft=2 description: Op110110 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op110111 o8=55 curriesLeft=2 description: Op110111 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111000 o8=56 curriesLeft=2 description: Op111000 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111001 o8=57 curriesLeft=2 description: Op111001 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111010 o8=58 curriesLeft=2 description: Op111010 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111011 o8=59 curriesLeft=2 description: Op111011 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111100 o8=60 curriesLeft=2 description: Op111100 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111101 o8=61 curriesLeft=2 description: Op111101 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111110 o8=62 curriesLeft=2 description: Op111110 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op111111 o8=63 curriesLeft=2 description: Op111111 has 5 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000000 o8=64 curriesLeft=1 description: Op1000000 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000001 o8=65 curriesLeft=1 description: Op1000001 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000010 o8=66 curriesLeft=1 description: Op1000010 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000011 o8=67 curriesLeft=1 description: Op1000011 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000100 o8=68 curriesLeft=1 description: Op1000100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000101 o8=69 curriesLeft=1 description: Op1000101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000110 o8=70 curriesLeft=1 description: Op1000110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1000111 o8=71 curriesLeft=1 description: Op1000111 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001000 o8=72 curriesLeft=1 description: Op1001000 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001001 o8=73 curriesLeft=1 description: Op1001001 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001010 o8=74 curriesLeft=1 description: Op1001010 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001011 o8=75 curriesLeft=1 description: Op1001011 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001100 o8=76 curriesLeft=1 description: Op1001100 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001101 o8=77 curriesLeft=1 description: Op1001101 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001110 o8=78 curriesLeft=1 description: Op1001110 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1001111 o8=79 curriesLeft=1 description: Op1001111 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010000 o8=80 curriesLeft=1 description: Op1010000 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010001 o8=81 curriesLeft=1 description: Op1010001 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010010 o8=82 curriesLeft=1 description: Op1010010 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010011 o8=83 curriesLeft=1 description: Op1010011 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010100 o8=84 curriesLeft=1 description: Op1010100 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010101 o8=85 curriesLeft=1 description: Op1010101 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010110 o8=86 curriesLeft=1 description: Op1010110 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1010111 o8=87 curriesLeft=1 description: Op1010111 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1011000 o8=88 curriesLeft=1 description: Op1011000 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1011001 o8=89 curriesLeft=1 description: Op1011001 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1011010 o8=90 curriesLeft=1 description: Op1011010 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1011011 o8=91 curriesLeft=1 description: Op1011011 has 6 params. Op is known at 7 params, and is copied from left child after that.
 Add op Op1011100 o8=92 curriesLeft=1 description: Op1011100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1011101 o8=93 curriesLeft=1 description: Op1011101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1011110 o8=94 curriesLeft=1 description: Op1011110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1011111 o8=95 curriesLeft=1 description: Op1011111 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100000 o8=96 curriesLeft=1 description: Op1100000 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100001 o8=97 curriesLeft=1 description: Op1100001 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100010 o8=98 curriesLeft=1 description: Op1100010 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100011 o8=99 curriesLeft=1 description: Op1100011 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100100 o8=100 curriesLeft=1 description: Op1100100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100101 o8=101 curriesLeft=1 description: Op1100101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100110 o8=102 curriesLeft=1 description: Op1100110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1100111 o8=103 curriesLeft=1 description: Op1100111 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101000 o8=104 curriesLeft=1 description: Op1101000 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101001 o8=105 curriesLeft=1 description: Op1101001 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101010 o8=106 curriesLeft=1 description: Op1101010 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101011 o8=107 curriesLeft=1 description: Op1101011 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101100 o8=108 curriesLeft=1 description: Op1101100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101101 o8=109 curriesLeft=1 description: Op1101101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101110 o8=110 curriesLeft=1 description: Op1101110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1101111 o8=111 curriesLeft=1 description: Op1101111 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110000 o8=112 curriesLeft=1 description: Op1110000 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110001 o8=113 curriesLeft=1 description: Op1110001 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110010 o8=114 curriesLeft=1 description: Op1110010 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110011 o8=115 curriesLeft=1 description: Op1110011 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110100 o8=116 curriesLeft=1 description: Op1110100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110101 o8=117 curriesLeft=1 description: Op1110101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110110 o8=118 curriesLeft=1 description: Op1110110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1110111 o8=119 curriesLeft=1 description: Op1110111 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111000 o8=120 curriesLeft=1 description: Op1111000 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111001 o8=121 curriesLeft=1 description: Op1111001 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111010 o8=122 curriesLeft=1 description: Op1111010 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111011 o8=123 curriesLeft=1 description: Op1111011 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111100 o8=124 curriesLeft=1 description: Op1111100 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111101 o8=125 curriesLeft=1 description: Op1111101 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111110 o8=126 curriesLeft=1 description: Op1111110 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op Op1111111 o8=127 curriesLeft=1 description: Op1111111 has 6 params. Op is known at 7 params, and is copied from left child after that.
Wikibinator203VM.js:6557 Add op F o8=128 curriesLeft=2 description: the church-false lambda aka λy.λz.z. (f u) is identityFunc. To keep closing the quine loop simple, identityFunc is (u u u u u u u u u) aka (f u), but technically (u u u u u u u u anything) is also an identityFunc since (f anything x)->x. (l u)->(u u u u u u u u u). (r u)->u. (l u (r u))->u, the same way (l anythingX (r anythingX))->anythingX forall halted lambda anythingX.
Wikibinator203VM.js:6557 Add op T o8=129 curriesLeft=2 description: the church-true lambda and the k lambda of SKI-Calculus, aka λy.λz.y
Wikibinator203VM.js:6557 Add op Bit0 o8=130 curriesLeft=247 description: complete binary tree is made of pow(2,cbtHeight) number of bit0 and bit1, evals at each curry, and counts rawCurriesLeft down to store (log2 of) cbt size
Wikibinator203VM.js:6557 Add op Bit1 o8=131 curriesLeft=247 description: see bit0
Wikibinator203VM.js:6557 Add op L o8=132 curriesLeft=1 description: get left/func child. Forall x, (l x (r x)) equals x, including that (l u) is identityFunc and (r u) is u.
Wikibinator203VM.js:6557 Add op R o8=133 curriesLeft=get right/param child. Forall x, (l x (r x)) equals x, including that (l u) is identityFunc and (r u) is u. description: undefined
Wikibinator203VM.js:6557 Add op Isleaf o8=134 curriesLeft=1 description: returns t or f of is its param u aka the universal lambda, same as does OpByte param equal 0x01.
Wikibinator203VM.js:6557 Add op OpByte o8=135 curriesLeft=1 description: returns a cbt8 whose bits are 1 to 255, whatever is params o8 opcode in its header. O8 of U is 1. O8 of (U U) is 2. O8 of (U (U U)) is 3. O8 of (U Anything_except_U) is 3. And so on up to 7 params. 6 params has O8 of 64 to 127. O8 of 7 params is 128 to 255.
Wikibinator203VM.js:6557 Add op CurleftByte o8=136 curriesLeft=1 description: returns a cbt8 whose bits are 1 to 255, whatever is params curriesLeft. 1 means it will eval on next param. 2 means it will eval when gets 2 more params. And so on up to 254. 255 means will never eval, just keeps adding more params. 255 is used in Infcur/[] aka a list that adds its param to the list, to forkEdit itself.
Wikibinator203VM.js:6557 Add op MaskByte o8=137 curriesLeft=1 description: returns a cbt8 whose bits are a mask of the 8 vm.mask_*, in params header. This means those wont be able to be reordered without breaking calls of MaskByte.
Wikibinator203VM.js:6557 Add op Infcur o8=138 curriesLeft=255 description: Infcur aka []. (Infcur x) is [x]. (Infcur x y z) is [x y z]. Like a linkedlist but not made of pairs, so costs half as much nodes. just keep calling it on more params and it will be instantly halted.
Wikibinator203VM.js:6557 Add op Rucfni o8=139 curriesLeft=255 description: Rucfni aka -=. Does exact same thing as Infcur but is normally displayed in reverse. Example [a b c d -e f g h i=] is both together and is (Infcur a b c d (Rucfni i h g f e)). [] is infcur. -= is rucfni. TODO use this with the tape (fntape) opcodes. Tape should be made of this.
Wikibinator203VM.js:6557 Add op S o8=140 curriesLeft=3 description: For control-flow. the S lambda of SKI-Calculus, aka λx.λy.λz.xz(yz)
Wikibinator203VM.js:6557 Add op Pair o8=141 curriesLeft=3 description: the church-pair lambda aka λx.λy.λz.zxy which is the same param/return mapping as Typeval, but use this if you dont necessarily mean a contentType and want to avoid it being displayed as contentType.
Wikibinator203VM.js:6557 Add op TypevalB o8=142 curriesLeft=3 description: TypevalB: TypevalB is for viewing cbt as bitstring (with 100000... padding til next powOf2 size). TypevalC is viewing cbt as cbt (no padding, use whole powOf2 size, such as a double uses 64 bits). The church-pair lambda aka λx.λy.λz.zxy but means for example (TypevalB U BytesOfUtf8String) or (TypevalB (Typeval U BytesOfUtf8String) BytesOfWhateverThatIs), as in https://en.wikipedia.org/wiki/Media_type aka contentType such as "image/jpeg" or (nonstandard contentType) "double[]" etc. Depending on what lambdas are viewing this, might be displayed specific to a contentType, but make sure to keep it sandboxed such as loading a html file in an iframe could crash the browser tab so the best way would be to make the viewer using lambdas. UPDATE: doubles is d* and floats is f*, both of which could use TypevalB or TypevalC. double is d, and float is f, which normally use typevalC but could use a typevalB with padding.
Wikibinator203VM.js:6557 Add op TypevalC o8=143 curriesLeft=3 description: TypevalC: TypevalB is for viewing cbt as bitstring (with 100000... padding til next powOf2 size). TypevalC is viewing cbt as cbt (no padding, use whole powOf2 size, such as a double uses 64 bits). The church-pair lambda aka λx.λy.λz.zxy but means for example [replaced application/x-IEEE754-double with just d and replaced doubles with d*] (TypevalC d 0x0000000000000000) OLD:(TypevalC application/x-IEEE754-double 0x0000000000000000), means use powOf2 number of bits in the cbt without viewing the last n bits as padding
Wikibinator203VM.js:6557 Add op VarargAx o8=144 curriesLeft=1 description: For defining turing-complete-types. Similar to op Lambda in cleanest mode (no nondeterminism allowed at all, cuz its a proof) except that at each next param, its funcBody is called on the params so far [allParamsExceptLast lastParam] and returns U if thats halted else returns anything except U and takes the R of that to mean returns that. Costs up to infinity time and memory to verify a false claim, but always costs finite time and memory to verify a true claim, since a true claim is just that it returns U when all of those are called. Since its so expensive to verify, anything which needs such verifying has a vm.mask_* bit set in its id as an optimization to detect if it does or does not need such verifying (has made such a claim that things return U). FIXME varargAx has strange behaviors about curriesLeft and verifying it and halted vs evaling. Its 2 params at first but after that it keeps extending it by 1 more param, after verifying the last param and choosing to be halted or eval at each next param. That design might change the number of params to simplify things, so careful in building on this op yet. I set it to 2 params so that after the first 7 params it waits until 9 params to eval, and after that it evals on every next param.
Wikibinator203VM.js:6557 Add op Lambdo o8=145 curriesLeft=1 description: It works like this: {{L Lambdo} (x y) (todo add comment param here...) [+ [* x x] *[y y]] 6 8}->100. {L Lambdo} is written as λ and its opcode is vm.o8OfLambda. The (x y ...) can be any num of params up to around 250 (todo whats the exact number? check vm.max* vars). OLD... Lambda is the 6 param form, waiting for a [...param names...] 7th param. Lambdo is the form with 7 params but that 7th param is (U U) so is just there to mark the opcode but is not used that way (it wont act like a lambda, would act like an Infcur). FIXME number of params depends on list size at param 7 but cant exceed around 250 (whats the exact number?). FIXME this must have an odd o8 cuz the [...] is 7th param which is not U. If it was U it would have to be an even o8. FIXME this will take varsize list??? [(streamGet varName) (streamGet otherVar) ...] and a funcBody (or is funcBody before that param) then that varsize list (up to max around 250-something params (or is it 120-something params?) then call funcBody similaar to described below (except maybe use [allParamsExceptLast lastParam] instead of (pair allParamsExceptLast lastParam)) FIXME TODO the streamGet op should work on that datastruct that funcBody gets as param, so (streamGet otherVar [allParamsExceptLast lastParam])-> val of otherVar in the param list of lambda op. OLD... Takes just funcBody and 1 more param, but using opOneMoreParam (the only vararg op) with a (lambda...) as its param, can have up to (around, TODO) undefined params including that funcBody is 8th param of u. (lambda funcBody ?? a b ??? c d e) -> (funcBody (pair (lambda funcBody ?? a b ??? c d) e)). It might be, Im trying to make it consistent, that funcBody is always param 8 in lambda and varargAx. (opOneMoreParam aVarName aLambda ...moreParams...).
Wikibinator203VM.js:6557 Add op P o8=146 curriesLeft=2 description: (P LambdaOrMutLamOrListOfObvalObkeyvalEtc ParamName) -> value of ParamName in (Lambda ...) etc, usually in [(Lambda ... all params except last) LastParam] since thats what FuncBody inside that Lambda call is called on [...] and FuncBody normally calls P to get specific params.
Wikibinator203VM.js:6557 Add op GetVarFn o8=147 curriesLeft=2 description: OLD, see ObKeyVal ObVal ObCbt etc. theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").
Wikibinator203VM.js:6557 Add op GetVarDouble o8=148 curriesLeft=2 description: OLD, see ObKeyVal ObVal ObCbt etc.theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").
Wikibinator203VM.js:6557 Add op GetVarDoubles o8=149 curriesLeft=2 description: OLD, see ObKeyVal ObVal ObCbt etc.theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").
Wikibinator203VM.js:6557 Add op Hyperleaf o8=150 curriesLeft=1 description: (Hyperleaf. The "hypercompute leaf combinator", just a binary forest data structure that prevents anything but combos of itself from being its params, and limits it to 7 stored params, and in abstract math it has 8 params but its always lazy-eval so the 8th param always infloops. You call it by looking along HypercomputeRedA and HypercomputeRedB edges. Its opcodes include the hypercomputing kinds of: S T F L R ISLEAF PAIR LAZYTHREEWAYCALL_CARDINALITYA_FUNC_PARAM SEMANTICFORDOESNOTHALT SEMANTICFORCALLERDOESNOTHAVEENOUGHCARDINALITYTOLOOKALONGTHATEDGE SEMANTICFORRETURNEDWHATSALONGREDAORBEDGE GETCALLERSCARDINALITYASLINKEDLISTOFTTTTASUNARY and maybe a few other operators, and one very important operator that branches at the first (of 7 or 8 params) param, which is a lambda of 6 params (if first param is the leaf hypercombinator, else first param is anything else).
Wikibinator203VM.js:6557 Add op HyperGreen o8=151 curriesLeft=1 description: This would be the L/GREEN hypercompute edge, which is same as the L op in wikibinator203 except if param is the "leaf hypercompute combinator" then "closes the quine loop" a different way by wrapping around to the "variant of identityFunc made of hypercompute combinator called on itself various ways"
Wikibinator203VM.js:6557 Add op HyperBlue o8=152 curriesLeft=1 description: This would be the R/BLUE hypercompute edge, which is same as the R op in wikibinator203 except if param is the "leaf hypercompute combinator" then "closes the quine loop" a different way by wrapping around to itself, returns the "leaf hypercompute combinator" (as its hyper_R child) in that one case.
Wikibinator203VM.js:6557 Add op HyperRed o8=153 curriesLeft=2 description: (HyperRed CardinalityComparator SomeComboOfHyperleafToGetRedEdge). TODO implement this https://raw.githubusercontent.com/benrayfield/hyperquasicrystal/main/hyperquasicrystalRedesign2022-8-10%2B.txt .This would give the RED (doesItHaltAtLowerCardinalityThanCaller) edge in... See https://github.com/benrayfield/hyperquasicrystal for an incomplete similar set of opcodes for hypercomputing. TODO design this wikibinator203 opcode. This is deterministic but in some cases costs pow(infinity,pow(infinity,infinity))... (im not sure how deep of exponents and infinities it will go) time and memory ONCE but after, in abstract math, thats cached, everything costs 1 compute step, so its more like a digital-signature of infinite size, or converges by disproof-by-contradiction, various ways it could be implemented. For example, you could have 2 competing networks, one with the claim that P!=NP and the other with the claim that P=NP, which would both be VarargAx ops of Hypercompute ops, so there will be a wikibinator203 node that claims P=NP and one that claims P!=NP but exactly 1 of those would ever (in abstract math, after infinities) halt.
Wikibinator203VM.js:6557 Add op EmptyTreemap o8=154 curriesLeft=2 description: (EmptyTreemap (IdThenGodelLessThan IdMaker) key)->U. Avl treemap.
Wikibinator203VM.js:6557 Add op Treemap o8=155 curriesLeft=6 description: (Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)->val. Avl treemap. leftChild andOr rightChild can be (EmptyTreemap (IdThenGodelLessThan IdMaker)). (IdThenGodelLessThan IdMaker) returns T or F for < vs >=. Check equals func, or call that twice, to know if equal.
Wikibinator203VM.js:6557 Add op DoAvlBal o8=156 curriesLeft=1 description: (DoAvlBal (Treemap ...)) -> forkEdited treemap with max difference of AvlHeight between any 2 avl childs (of same Treemap parent) being 1. Avl balance is supposed to be -1, 0, or 1 at each node. Each node is a Treemap or EmptyTreemap. An EmptyTreemap is always balanced.
Wikibinator203VM.js:6557 Add op AvlHeightD o8=157 curriesLeft=1 description: (AvlHeightD (Treemap_or_EmptyTreemap ...)) -> a double, such as (TypevalC d 0x0000000000000000) aka 0. Since double only does integers up to pow(2,53), this must infinite loop ({I I}{I I}) if avlHeight >= pow(2,53).
Wikibinator203VM.js:6557 Add op PutNoBal o8=158 curriesLeft=3 description: TreemapPutNoBal renamed to PutNoBal. (PutNoBal key val map) -> forkEdited map which has that mapping but may be unbalanced. Caller should DoAvlBal on returned map to get a balanced one, or keep putting and balance after multiple puts. Could TreemapNorm instead of DoAvlBal. Both return balanced treemap (if was valid map to start with). TreemapNorm returns same map regardless of order of puts and balances which created it, aka returns a near-complete-binary-tree with only the deepest row potentially not filled.
Wikibinator203VM.js:6557 Add op Put o8=159 curriesLeft=3 description: (Put key val map) -> forkEdited map which has that mapping and is avl balanced as if by DoAvlBal (but may be optimized to do the put and balance together to avoid funcallCaching in those middle steps, as long as it returns the exact same thing aka what it returns must have same globalId (for all possible IdMaker) as if done by DoAvlBal.)
Wikibinator203VM.js:6557 Add op Del o8=160 curriesLeft=2 description: (Del Key (Treemap ...)) -> forkEdited treemap/emptytreemap with that key/val gone, balanced as if by DoAvlBal after removing it, even if as an optimization thats done at the same time.
Wikibinator203VM.js:6557 Add op TreemapHas o8=161 curriesLeft=2 description: (TreemapHas key map) -> T or F depending if that key is in the avl treemap.
Wikibinator203VM.js:6557 Add op GodelLessThan o8=162 curriesLeft=2 description: The godel-like-number of a wikibinator203 lambda is 1 for U, 2 for (U U), and so on in order of height first, then recursively compare left child (skip this if the 2 left childs equal), then break ties by recursively the right child, which has bigO of max height of its 2 params. (GodelLessThan x y) -> T or F, by forest shape recursively. Optimized to worst case of max height of x and y, other than that triggers generating ids for all things compared. A trueOrFalseComparator. Returns T or F. Compares 2 fns by their godel-like-number. There are 1, 2, 5, 26, 677... fns atOrBelow each height. But in practice this will be implemented as comparing first by height, and to break ties compare recursively in left child, and to break ties compare recursively in right child, which has a bigO of max height of the 2 fns to compare by optimizing for equality and checking equality before recursing. (GodelLessThan U (U U))->T. (GodelLessThan 2.34 5.67)->T cuz nonnegative float64s compare the same way as int64s, but the sign bit puts all the negatives after all the positives. (GodelLessThan GodelLessThan (T GodelLessThan))->T. (GodelLessThan (U (U U)) (U U))->F. Equals could be implemented using 2 calls of this.
Wikibinator203VM.js:6557 Add op ChainLessThan o8=163 curriesLeft=4 description: This is used in Treemap and EmptyTreemap. Used for comparing first by a (normally) 256 or 512 bit id of each of 2 params, and breaks ties using second comparator which is normally GodelLessThan. (ChainLessThan FirstComparator SecondComparator x y) -> T or F. FIXME maybe comparators should be redesigned to have 3 possible return vals: F, IdentityFunc#(F U), and T? or -1 0 or 1 as doubles or ints or bytes?
Wikibinator203VM.js:6557 Add op IdThenGodelLessThan o8=164 curriesLeft=4 description: This is used in Treemap and EmptyTreemap. Used for comparing first by a (normally) 256 or 512 bit id of each of 2 params, and breaks ties using GodelLessThan. comparator which is normally GodelLessThan. (IdThenGodelLessThan IdMaker x y) -> T or F. FIXME maybe comparators should be redesigned to have 3 possible return vals: F, IdentityFunc#(F U), and T? or -1 0 or 1 as doubles or ints or bytes?
Wikibinator203VM.js:6557 Add op ? o8=165 curriesLeft=3 description: (? x val map) -> map forkEdited to map key (? x) to val.
Wikibinator203VM.js:6557 Add op ?C o8=166 curriesLeft=3 description: (?C x valAsArray map) -> map forkEdited to map key (?C x) to valAsArray. Im unsure if valAsArray should be a TypevalB, TypevalC, or raw Cbt. Or maybe allow all 3? Technically val can be anything, but this is a semantic to suggest viewing it that way.
 Add op ?? o8=167 curriesLeft=4 description: (?? x y val map) -> map forkEdited to map key (?? x y) to val.
 Add op TreemapNorm o8=168 curriesLeft=1 description: (TreemapNorm map) -> map forkEdited to be nearly completeBinaryTree (still an avl tree).
 Add op TreemapVerify o8=169 curriesLeft=1 description: (TreemapVerify map) -> T or F depending if map is a valid Treemap datastruct. Its always a valid fn, but an example of invalid is if it contains more than 1 unique comparator or is in a wrong sorted order by that comparator. Does NOT verify comparator always halts or sorts consistently (TODO only optimize if comparator is known consistent, which can be proven by it being a forest of nands or forest of ops on int32s or on int16s etc, basically anything that could go in an opencl ndrange kernel or webgl shaders (GLSL) (excluding roundoff, use less bits to handle that) can be proven to halt for all possible pair of params, and ...
 Add op TapeSlideL o8=170 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeSlideL Tape) -> forkEdited lambda-sparse-turing-tape slid to left.
 Add op TapeSlideR o8=171 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeSlideR Tape) -> forkEdited lambda-sparse-turing-tape slid to right.
 Add op TapeCopy o8=172 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeCopy Tape) -> forkEdited lambda-sparse-turing-tape with center of tape copied to register.
 Add op TapePaste o8=173 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapePaste Tape) -> forkEdited lambda-sparse-turing-tape with register copied to center of tape.
 Add op TapeCall o8=174 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeCall Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (TapeGetRegister Tape (TapeGetCenter Tape)) aka by the fn in register called on the fn in center of tape.
 Add op TapeInfcur o8=175 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeInfcur Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by [(TapeGetRegister Tape) (TapeGetCenter Tape)]
 Add op TapeRucfni o8=176 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeInfcur Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by -(TapeGetRegister Tape) (TapeGetCenter Tape)=
 Add op TapeGetL o8=177 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeGetL Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (L register).
 Add op TapeGetRegister o8=178 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeGetRegister Tape) -> gets the register in [...left side of tape... register -tapeCenter ...right side of tape...=].
 Add op TapeGetCenter o8=179 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeGetCenter Tape) -> gets the tapeCenter in [...left side of tape... register -tapeCenter ...right side of tape...=].
 Add op TapeGetLR o8=180 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeGetLR Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (TapeGetR (TapeGetL register)). Useful for getting x in [x y] aka (Infcur x y), or y in -x y= aka (Rucfni y x), especially such []s created by TapeInfcur and -=s created by TapeRucfni.
 Add op TapeGetR o8=181 curriesLeft=1 description: See fntape in occamsfuncer docs for dovetailing etc. (TapeGetR Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (R register).
 Add op D o8=182 curriesLeft=2 description: (D x map) -> (map (D x)). Get (whats normally a) double value from map. (D key Map) -> val of (D key) in that map. The $ in a/b/sum$.
 Add op Du o8=183 curriesLeft=2 description: (Du x map) -> (map (Du x)). Get general fn (often not deduped) from map. (Du key Map) -> val of (Du key) in that map. The ^ in a/b/fnVar^.
 Add op DuE o8=184 curriesLeft=3 description: (DuE GetObKey GetVal map) -> map forkEdited to have key (Du (GetObKey map)) mapped to (GetVal map). To put literal key x and literal value y, use (DuE ,x ,y TheMap) which maps (Du x) to y.
 Add op DE o8=185 curriesLeft=3 description: (DE GetObKey GetVal map) -> map forkEdited to have key (D (GetObKey map)) mapped to (GetVal map). To put literal key x and literal value y, use (DE ,x ,y TheMap) which maps (D x) to y. ... OLD: Put double value into map. (DE key val Map) -> forkEdited map, that maps (DE key) to val.
 Add op DGo o8=186 curriesLeft=2 description: Like D except with pointer jumping for first param. (DGo x map) -> (map (D (x map))). Example: a/b/sum$ is (DGo a/b/sum) is (DGo (GoO (OO a b) sum)). Call that on a Treemap and it recurses a/b/sum$ in it to get a val.
 Add op DuGo o8=187 curriesLeft=2 description: Like Du except with pointer jumping for first param. (DuGo x map) -> (map (Du (x map))). Example: a/b/sum^ is (DuGo a/b/fnVar) is (DGo (GoO (OO a b) fnVar)). Call that on a Treemap and it recurses a/b/sum^ in it to get a val.
 Add op PrimSize o8=188 curriesLeft=1 description: (PrimSize (TypevalC ...)) -> 8..64 etc. (PrimSize of a TypevalB or TypevalC of doubles ints floats uint8s etc) in bits, such as 64 for a double array, 32 for an int array or float array, etc. TODO shorten and decide on which contentTypes will be used for such arrays, such as d for double or d* for doubles... OLD: application/x-IEEE754-doubles for double array.
 Add op TGet o8=189 curriesLeft=2 description: Typed primitive array gET. (TGet array index) -> val at that index in the array.
 Add op TPut o8=190 curriesLeft=3 description: Typed primitive array pUT. (TPut array index val) -> forkEdited array. Check (PrimSize array) for the size put in it. If its not a typed array, returns it as is. This will work with vm.Mut optimization without checking which size of array it is.
 Add op BGet o8=191 curriesLeft=2 description: (BGet cbtArray cbt32Index) -> raw byte at that index
 Add op BPut o8=192 curriesLeft=3 description: (BPut cbtArray cbt32Index cbt8Val) -> forkEdited cbtArray with that raw byte put at the index.
 Add op KE o8=193 curriesLeft=3 description: TODO replace KE and KKE etc with Du Bl D O OO GoO etc which are being added 2023-3+. (KE Key Val Map) -> forkEdited map with (KE Key) mapped to Val.
 Add op KKE o8=194 curriesLeft=4 description: TODO replace KE and KKE etc with Du Bl D O OO GoO etc which are being added 2023-3+.  (KE KeyA KeyB Val Map) -> forkEdited map with (KKE KeyA KeyB) mapped to Val.
 Add op Du o8=195 curriesLeft=2 description: (Du a SomeMap) -> (SomeMap (Du a)). Get potentially dup (not yet deduped) fn, especially in a vm.Mut optimization but also works in interpreted mode using Treemap all the way through.
 Add op Bl o8=196 curriesLeft=2 description: (Bl a SomeMap) -> (SomeMap (Bl a)). Get potentially dup typed blob such a TypevalB or TypevalC of a uint8 short int float32 or float64 etc primitive array, especially in a vm.Mut optimization but also works in interpreted mode using Treemap all the way through.
 Add op D o8=197 curriesLeft=2 description: (D a SomeMap) -> (SomeMap (D a)). Normally used with typed double/float64 and often vm.Mut optimization.
 Add op OO o8=198 curriesLeft=3 description: (O varName secondVarName SomeMap) -> (SomeMap (O a)). /varName/secondVarName 2 levels deep. Normally used with vm.Mut optimization.
 Add op GoO o8=199 curriesLeft=3 description: (O getVarName secondVarName SomeMap) -> (SomeMap (OO (getVarName SomeMap) secondVarName)). /varName/secondVarName 2 levels deep but used when its deeper than 2 such as /varName/secondVarName/thirdVarName. Normally used with vm.Mut optimization.
 Add op K? o8=200 curriesLeft=2 description: TODO rename K? to K, and rename KK? to KK. (K? Key Map) -> val of (KE Key) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KE Key)).
 Add op KK? o8=201 curriesLeft=3 description: TODO rename K? to K, and rename KK? to KK. (K? KeyA KeyB Map) -> val of (KE KeyA KeyB) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KKE KeyA KeyB)).
 Add op + o8=202 curriesLeft=2 description: (+ 2 3)->5. (+[I I *[,5 I]] ,10) -> 70. OLD... (3+2, reverse order to match the reverse in (...) if vararg), of 2 doubles, or +(X Y Z)State -> + of {Z State} {Y State} then {X State} (reverse order cuz thats the order they happen in (...)), for vararg in (...)/infcurList. + of doubles, either their raw bits or the R child (in case its a typeval, but doesnt verify its a typeval, just takes the R if its not a cbt)
 Add op * o8=203 curriesLeft=2 description: (* 2 3)->6 (3*2, reverse order to match the reverse in (...) if vararg), of 2 doubles, or *[X Y Z]State -> * of {Z State}, {Y State}, and {X State}, for vararg in (...)/infcurList. See + for details on doubles in general. (((new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList)))
 Add op Mi o8=204 curriesLeft=2 description: double minus double. See + for details on doubles in general.
 Add op % o8=205 curriesLeft=2 description: double mod double. See + for details on doubles in general.
 Add op Div o8=206 curriesLeft=2 description: double divide double. See + for details on doubles in general.
 Add op ++ o8=207 curriesLeft=2 description: ++(a getB getC)State -> next State with value of ?(a getB getC) incremented. ++(a)State -> State with val of a incremented. See + for details on doubles in general.
 Add op Mii o8=208 curriesLeft=2 description: Minus minus. Mii(a getB getC)State -> next State with value of ?(a getB getC) decremented. --(a)State -> State with val of a decremented. See + for details on doubles in general.
 Add op ** o8=209 curriesLeft=2 description: [** 2 10]->1024. See + for details on doubles in general.
 Add op & o8=210 curriesLeft=2 description: double & double (cast both to int32 first, &, then back to double). See + for details on doubles in general.
 Add op | o8=211 curriesLeft=2 description: double | double (cast both to int32 first, |, then back to double). See + for details on doubles in general.
 Add op Xor o8=212 curriesLeft=2 description: double xor double (cast both to int32 first, ^, then back to double). See + for details on doubles in general.
 Add op ~ o8=213 curriesLeft=1 description: ~double (cast to int32 first, ~, then back to double). See + for details on doubles in general.
 Add op Shll o8=214 curriesLeft=2 description: double << double (cast both to int32 first, <<, then back to double). See + for details on doubles in general.
 Add op Shrr o8=215 curriesLeft=2 description: double >> double (cast both to int32 first, >>, then back to double). See + for details on doubles in general.
 Add op Shrrr o8=216 curriesLeft=2 description: double >>> double (cast both to int32 first, >>>, then back to double). See + for details on doubles in general.
 Add op Neg o8=217 curriesLeft=1 description: negate double, unary. See + for details on doubles in general.
 Add op Sine o8=218 curriesLeft=1 description: Sine of double. See + for details on doubles in general.
 Add op Sqrt o8=219 curriesLeft=1 description: Sqrt of double. See + for details on doubles in general.
 Add op Get32BitsInCbt o8=220 curriesLeft=2 description: (get32BitsInCbt cbtOf32BitBlocks cbt32Index)->cbt32Val
 Add op Put32BitsInCbt o8=221 curriesLeft=3 description: (put32BitsInCbt cbtOf32BitBlocks cbt32Index cbt32Val)->forkEdited_cbtOf32BitBlocks
 Add op Eq o8=222 curriesLeft=2 description: Do 2 fns equal by content/forestShape of 2 params. This op could be derived using s, t, l, r, and isLeaf. implementationDetailOfThePrototypeVM(((If a node doesnt contain a blob such as Int32Array (which is just an optimization of bit0 and bit1 ops) then its id64 (Node.idA and Node.idB, together are id64, and blobFrom and blobTo would both be 0 in that case, which is normally id128) is its unique id in that VM. Maybe there will be a range in that id64 to mean blobFrom and blobTo are both 0 aka does not contain a blob.))).
 Add op While o8=223 curriesLeft=3 description: stream: (While condition loopBody stream) is like, if you wrote it in javascript: while(condition(stream).n.z()) stream = loopBody(stream); return stream;
 Add op DoWhile o8=224 curriesLeft=3 description: stream: (DoWhile loopBody condition stream) is like, if you wrote it in javascript: do{ stream = loopBody(stream); }while(condition(stream)); return stream; 
 Add op For o8=225 curriesLeft=5 description: (For start condition afterLoopBody loopBody stream) is like, if you wrote it in javascript: for(stream = start(stream); condition(stream); stream = afterLoopBody(stream)) stream = loopBody(stream); return stream;
 Add op Fo o8=226 curriesLeft=4 description: (Fo varName GetUpTo loopBody map), is like For except starts with varName being 0 and counts up to whatever (UpTo map) returns.
 Add op Foo o8=227 curriesLeft=2 description: [update: renaming this from Fo To Foo cuz its vararg and harder to optimize with multiple loopbodyparts]. A simple kind of loop that starts by computing its number of cycles (doesnt check it again after each call of loopBody). (Fo [varName_orShouldThisBeGetVarName getUpTo ...loopBodyParts...] map) -> forkEdits map to have varName_orShouldThisBeGetVarName->0 ->1 ->2 up to (getUpTo whatMapStartsAs)-1 then map becomes loopBody(map) where loopBody is _[...loopBodyParts...] aka chain them. See example code in lambda/AugmentedBalls.wikib that uses Fo... Fo[,y .height Fo[,x .width =[,pix +[.i .red] &[,255 +[.x *[.age ,35]]]] =[,pix +[.i .green] &[,255 +[.x *[.y .age]]]] =[,pix +[.i .blue] &[,255 *[,333 /[.x .y]]]] +=[,i ,4] ]]
 Add op IfElse o8=228 curriesLeft=4 description: (ifElse condition ifTrue ifFalse state) is like, if you wrote it in javascript: ((condition(state) ? ifTrue : ifFalse)(state)).
 Add op If o8=229 curriesLeft=3 description: (if condition ifTrue state) is like, if you wrote it in javascript: (condition(state) ? ifTrue(state) : state).
 Add op Lt o8=230 curriesLeft=2 description: less than. (Lt 2 3) -> T, else F
 Add op Lte o8=231 curriesLeft=2 description: less than or equal. (Lte 2 3) -> T, else F
 Add op Gt o8=232 curriesLeft=2 description: greater than. (Gt 3 2) -> T, else F
 Add op Gte o8=233 curriesLeft=2 description: greater than or equal. (Gte 3 2) -> T, else F
 Add op GetSalt128 o8=234 curriesLeft=1 description: (getSalt128 ignore)->the cbt128 of salt thats at top of stack aka 3-way-lambda-call of salt128 func and param.
 Add op WithSalt128 o8=235 curriesLeft=3 description: (withSalt128 cbt128 func param)-> (func param) except with that cbt128 pushed onto the salt stack. During that, getSalt128 will get that cbt128.
 Add op WithSalt128TransformedBy o8=236 curriesLeft=1 description: (withSalt128TransformedBy funcOf128BitsTo128Bits func param)-> same as (withSalt128 (funcOf128BitsTo128Bits (getSalt128 u)) func param).
 Add op SolveRecog o8=237 curriesLeft=1 description: (solveRecog x) -> any y where (x y) halts, preferring those that use less compute resources (stackTime stackMem etc) but THIS IS NONDETERMINISTIC so can only be used while stackIsAllowMutableWrapperLambdaAndSolve is true on stack. This is for bit what solveFloat64 is for double/float64. Default implementation will dovetail (even at deterministic level), but thats impractically slow for most things.
 Add op SolveFloat64 o8=238 curriesLeft=1 description: (solveFloat64 x) -> any y where (x y)->float64 (todo is the float64 the raw 64 bits or is it wrapped in a typeval or a typevalDouble etc?), where the float64 is positive, and the higher the better. Requiring positive makes it able to emulate solveRecog. The higher the better, makes it a goal function. Like solveRecog, THIS IS NONDETERMINISTIC so can only be used while stackIsAllowMutableWrapperLambdaAndSolve is true on stack. Default implementation will dovetail (even at deterministic level), but thats impractically slow for most things.
 Add op Bize31 o8=239 curriesLeft=1 description: (bize31 x) -> cbt32, the low 31 bits of the index of the last (op) bit1, if its a cbt, else 0 if its not a cbt or does not contain any bit1. Bize means bitstring size (in bits). Max bitstring size is around 2^247-1 bits (todo find exact number... its in vm.maxBits TODO use that here and merge duplicate code in what generates these descriptions of bize* opcodes). 2**31 bits is 256mB.
 Add op Bize53 o8=240 curriesLeft=1 description: (bize53 x) -> cbt64, the low 53 (so it can be stored in a double) bits of bize. See bize32 comment for what is bize in general. Even though only 31 bits of bize are normally stored in ids, cbtHeight (in 8 bits of cur minus some constant) is completely stored so know how big of a cbt it is just from id256.
 Add op Bize256 o8=241 curriesLeft=1 description: (bize256 x) -> cbt256. See bize31 comment for what is bize in general. This always fits in a 256 bit literal that is its own id. Max cbt size is 2**247=2.261564242916332e+74 and max bitstring size is 1 bit less (which is a number that wont fit in double, but maxBits itself fits in double cuz its a small enuf powOf2). Even though only 31 bits of bize are normally stored in ids, cbtHeight (in 8 bits of cur minus some constant) is completely stored so know how big of a cbt it is just from id256. Bize256 always fits in a 256 bit id of literal 256 bits.
 Add op LambdaParamsList o8=242 curriesLeft=1 description: From any number of curries (such as waiting on 3 more params in this: (Lambda FuncBody [w x y z] 100), or from the (LazyEval (Lambda... allParamsExceptLast) lastParam) if it has all its params which FuncBody is called on), gets the whole [w x y z], or gets [] if its not 1 of those datastructs. [...] is infcur syntax.
 Add op LambdaParamsStream o8=243 curriesLeft=1 description: FIXME this should return a [(Mut...) (Mut...) (Mut...)]. FIXME see comments at top of this js file, about [...] of "[cbtNotNecessarilyDeduped doubleThatIsOrWillBeDeduped fnThatIsOrWillBeDeduped fnNotNecessarilyDeduped fnAsKeyThatIsOrWillBeDeduped]" as snapshot of Mut. Used with (Lambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (opLambda FuncBody [x y z] valX valY) valZ)). Returns [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val], in blocks of those 4 things, which is used with Opmut/For/While/etc.
 Add op Seq o8=244 curriesLeft=2 description: The _ in (_[a b c] x) means ((Seq [a b c]) x) which does (c (b (a x))), for any vararg in the [].
 Add op HasMoreThan7Params o8=245 curriesLeft=1 description: op is known at 7 params, so thats sometimes used as end of a list, especially in an infcur list.
 Add op EmulateUsingInt32s o8=246 curriesLeft=1 description: There are some float32 and float64/double opcodes. These are well defined across multiple languages, at least what is most common for rounding behaviors etc (see IEEE754 but thats still a little vague), like a*b or a+b or 1/b or a/b or Math.sin(a) or Math.exp(a))... Use (EmulateUsingInt32s SomeOpcode) to get a definition of it (callable as a lambda the same way) that is always deterministic, made of int AND int, int XOR int, int shiftleft int, int multiply int, etc... the kinds of ops that are found in most hardware, though GPU.js compiling to GLSL shaders can only handle i think int16 or (nondeterministicly) float32, or it might be int24. EmulateUsingInt32s will be how to operate the strictest mode of wikibinator203, which must be completely deterministic so it syncs at the "cellular automata speed of light" in the real world. Even the int32 ops would be derived from S T Pair and other simple lambdas, but TODO should that be returned somewhere (could just derive it at runtime instead of making opcodes for it, since its mostly a math abstraction rarely used literally.
 Add op EmulateUsingInt16s o8=247 curriesLeft=1 description: like EmulateUsingInt32s but using int16 ops, in case youre in a glsl optimization (see pushEvaler func) made by GPU.js that can only handle up to int16 or nondeterministicly float32.
 Add op EmulateUsingInt8s o8=248 curriesLeft=1 description: like EmulateUsingInt32s and EmulateUsingInt16s but using byte ops, in case youre in a glsl optimization (see pushEvaler func) made by GPU.js that can only handle up to int16 or nondeterministicly float32, AND if you want those 16 (or it might go up to int24) bits to multiply or add 2 int8s in etc, or maybe that would work in int16s.
 Add op Car o8=249 curriesLeft=2 description: (LisplikeEval -,Car ,-,Cons .x .y== TreemapAsState). Should the inner -...= be prefixed by , ? OLD... -Car -Cons .x .y= TreemapAsState= returns (.x TreemapAsState) aka (TreemapAsState x). FIXME im not sure which should be dynamic and which should be quoted, such as should it be -.car -.cons .x .y= TreemapAsState= ? Or -car -cons x y= TreemapAsState= ? And should it need a separate LisplikeEval func (derive it using lambda opcode?)? FIXME the TreemapAsState must be called by (...). All lisplike funcs will take exactly 2 params: their params as a -...= linkedlist AND TreemapAsState. Could do it as everything is dynamic, so put T/, prefix to quote. (LisplikeEval -,Car -,Cons .x .y== TreemapAsState)
 Add op Cdr o8=250 curriesLeft=2 description: See Car.
 Theres 5 reserved opcodes for future expansion in this Wikibinator203 VM. All Wikibinator203 VMs must have the same set of opcodes, else call it something other than Wikibinator203, so those are expected to be filled in while experimenting with the prototype VM to find what works and is intuitive for Humans.
 Add op Op251ReservedForFutureExpansionAndInfloopsForNow o8=251 curriesLeft=undefined description: undefined
 Add op Op252ReservedForFutureExpansionAndInfloopsForNow o8=252 curriesLeft=undefined description: undefined
 Add op Op253ReservedForFutureExpansionAndInfloopsForNow o8=253 curriesLeft=undefined description: undefined
 Add op Op254ReservedForFutureExpansionAndInfloopsForNow o8=254 curriesLeft=undefined description: undefined
 Add op Op255ReservedForFutureExpansionAndInfloopsForNow o8=255 curriesLeft=undefined description: undefined
 about to set curriesLeft. op=128
 about to set curriesLeft. op=129
 about to set curriesLeft. op=130
 about to set curriesLeft. op=131
 about to set curriesLeft. op=132
 about to set curriesLeft. op=133
 about to set curriesLeft. op=134
 about to set curriesLeft. op=135
 about to set curriesLeft. op=136
 about to set curriesLeft. op=137
 about to set curriesLeft. op=138
 about to set curriesLeft. op=139
 about to set curriesLeft. op=140
 about to set curriesLeft. op=141
 about to set curriesLeft. op=142
 about to set curriesLeft. op=143
 about to set curriesLeft. op=144
 about to set curriesLeft. op=145
 about to set curriesLeft. op=146
 about to set curriesLeft. op=147
 about to set curriesLeft. op=148
 about to set curriesLeft. op=149
 about to set curriesLeft. op=150
 about to set curriesLeft. op=151
 about to set curriesLeft. op=152
 about to set curriesLeft. op=153
 about to set curriesLeft. op=154
 about to set curriesLeft. op=155
 about to set curriesLeft. op=156
 about to set curriesLeft. op=157
 about to set curriesLeft. op=158
 about to set curriesLeft. op=159
 about to set curriesLeft. op=160
 about to set curriesLeft. op=161
 about to set curriesLeft. op=162
 about to set curriesLeft. op=163
 about to set curriesLeft. op=164
 about to set curriesLeft. op=165
 about to set curriesLeft. op=166
 about to set curriesLeft. op=167
 about to set curriesLeft. op=168
 about to set curriesLeft. op=169
 about to set curriesLeft. op=170
 about to set curriesLeft. op=171
 about to set curriesLeft. op=172
 about to set curriesLeft. op=173
 about to set curriesLeft. op=174
 about to set curriesLeft. op=175
 about to set curriesLeft. op=176
 about to set curriesLeft. op=177
 about to set curriesLeft. op=178
 about to set curriesLeft. op=179
 about to set curriesLeft. op=180
 about to set curriesLeft. op=181
 about to set curriesLeft. op=182
 about to set curriesLeft. op=183
 about to set curriesLeft. op=184
 about to set curriesLeft. op=185
 about to set curriesLeft. op=186
 about to set curriesLeft. op=187
 about to set curriesLeft. op=188
 about to set curriesLeft. op=189
 about to set curriesLeft. op=190
 about to set curriesLeft. op=191
 about to set curriesLeft. op=192
 about to set curriesLeft. op=193
 about to set curriesLeft. op=194
 about to set curriesLeft. op=195
 about to set curriesLeft. op=196
 about to set curriesLeft. op=197
 about to set curriesLeft. op=198
 about to set curriesLeft. op=199
 about to set curriesLeft. op=200
 about to set curriesLeft. op=201
 about to set curriesLeft. op=202
 about to set curriesLeft. op=203
 about to set curriesLeft. op=204
 about to set curriesLeft. op=205
 about to set curriesLeft. op=206
 about to set curriesLeft. op=207
 about to set curriesLeft. op=208
 about to set curriesLeft. op=209
 about to set curriesLeft. op=210
 about to set curriesLeft. op=211
 about to set curriesLeft. op=212
 about to set curriesLeft. op=213
 about to set curriesLeft. op=214
 about to set curriesLeft. op=215
 about to set curriesLeft. op=216
 about to set curriesLeft. op=217
 about to set curriesLeft. op=218
 about to set curriesLeft. op=219
 about to set curriesLeft. op=220
 about to set curriesLeft. op=221
 about to set curriesLeft. op=222
 about to set curriesLeft. op=223
 about to set curriesLeft. op=224
 about to set curriesLeft. op=225
 about to set curriesLeft. op=226
 about to set curriesLeft. op=227
 about to set curriesLeft. op=228
 about to set curriesLeft. op=229
 about to set curriesLeft. op=230
 about to set curriesLeft. op=231
 about to set curriesLeft. op=232
 about to set curriesLeft. op=233
 about to set curriesLeft. op=234
 about to set curriesLeft. op=235
 about to set curriesLeft. op=236
 about to set curriesLeft. op=237
 about to set curriesLeft. op=238
 about to set curriesLeft. op=239
 about to set curriesLeft. op=240
 about to set curriesLeft. op=241
 about to set curriesLeft. op=242
 about to set curriesLeft. op=243
 about to set curriesLeft. op=244
 about to set curriesLeft. op=245
 about to set curriesLeft. op=246
 about to set curriesLeft. op=247
 about to set curriesLeft. op=248
 about to set curriesLeft. op=249
 about to set curriesLeft. op=250
 about to set curriesLeft. op=251
 about to set curriesLeft. op=252
 about to set curriesLeft. op=253
 about to set curriesLeft. op=254
 about to set curriesLeft. op=255
 vm.o8OfLambda=72
 Updated Lambda op: {"name":"λ","prefix":null,"isStrange":false,"curriesLeft":1,"description":"Op1001000 has 6 params. Op is known at 7 params, and is copied from left child after that."}
 FIXME type application/x-IEEE754-double (UPDATE: its just d now) vs type application/x-IEEE754-doubles (UPDATE: its just d* now) has a problem that one is a raw cbt and the other is a bitstring cbt. Maybe there should be 2 typeval opcodes, one for raw cbt (thats always a powOf2) and one for bitstring? But, they are interchangible in that if you know the bitstring content you can generate the padding and therefore the rest of the double, so its probably ok.
 Wrapping string of 1 chars
 Wrapping string of 1 chars
 Wrapping string of 2 chars
 Wrapping string of 2 chars
 Test pass: test_tokensListToPushPopPointers, both equal 11,1,2,10,5,4,6,7,8,9,3,0,12
 Test pass: tie the quine knot, both equal F(U)
 Test pass: tie the quine knot 2, both equal F(U)
 Test pass: tie the quine knot 3, both equal F(U)
 Test pass: tie the quine knot 4, both equal U
 Test pass: tie the quine knot 5 aka l(x)(r(x)) equals x, for any x (in this case x is u), both equal U
 Test pass: tie the quine knot 6, both equal 0
 Test pass: tie the quine knot 7, both equal 0
 Test pass: tie the quine knot 8, both equal 0
 Test pass: tie the quine knot 9, both equal 0
 Test pass: tie the quine knot 10, both equal 1
 Test pass: tie the quine knot 11, both equal 1
 Test pass: l(x)(r(x)) equals x, for any x (in this case x is s), both equal S
 Test pass: l(x)(r(x)) equals x, for any x (in this case x is l), both equal L
 Test pass: l(x)(r(x)) equals x, for any x (in this case x is r), both equal R
 Test pass: s(t)(t)(l) which should be an identityFunc, both equal L
 Test pass: check dedup of s(t)(t), both equal S(T)(T)
 Test pass: s(t)(t) called on itself returns itself since its an identityFunc, both equal S(T)(T)
 Test pass: o8/opcode of u, both equal 1
 Test pass: o8/opcode of u(u), both equal 2
 Test pass: check dedup of u(u), both equal Op10
 Test pass: o8/opcode of u(uu), both equal 3
 Test pass: o8/opcode of u(uu)(uu)(uu)(uu)(u)(uu)().o8(), both equal 125
 Test pass: o8/opcode of u(uu)(uu)(uu)(uu)(uu)(uu), both equal 127
 Test pass: (l x (r x)) equals x forall x, deeper, both equal S
 Test pass: (l x (r x)) equals x forall x, deeper 2, both equal Pair(S)(L)
 Test pass: callParamOnItself(pair)->pair(pair), both equal Pair(Pair)
 Test pass: callParamOnItself(pair)->pair(pair) 2 different identityFuncs, both equal Pair(Pair)
 Test pass: test_isUnaryMiddleOrRight_Tm_1 should be false, both equal false
 Starting very basic vm.eval tests
 TODO run a few more tests after these pushEvaler optimizations since in some fns (aNode.evaler) they replace vm.rootEvaler (which becomes aNode.evaler.prev, but you can still use rootEvaler there by setting aNode.evaler.on=false; and would still use whichever evaler, per node, has evaler.on==true, which is designed that way to make testing of combos of evalers easy at runtime.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Tm# parsing=[Parsing from=2 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Treemap parsing=[Parsing from=4 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Treemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=6 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=Em# parsing=[Parsing from=9 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em#
 Start observePushToken=( at observePushToken_tokenIndex=10
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=11 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=13 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (14) and observePushToken=( (10) expectPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=15 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 15
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=16 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=world parsing=[Parsing from=18 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=20 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=22 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (23) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=world parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Test pass: Treemap size 1 hello returns world, both equal world
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Tm# parsing=[Parsing from=2 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Treemap parsing=[Parsing from=4 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Treemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=6 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=( parsing=[Parsing from=9 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=9
 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=10 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=Em# parsing=[Parsing from=12 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em#
 Start observePushToken=( at observePushToken_tokenIndex=13
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=14 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=15 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 15
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=16 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (17) and observePushToken=( (13) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=18 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 18
 possible (looking for a) observedPopToken=abc parsing=[Parsing from=19 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=abc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=20 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 20
 possible (looking for a) observedPopToken=5 parsing=[Parsing from=21 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=5
 possible (looking for a) observedPopToken=  parsing=[Parsing from=22 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 22
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=23 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (9) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=25 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 25
 possible (looking for a) observedPopToken=ghijk parsing=[Parsing from=26 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ghijk
 possible (looking for a) observedPopToken=  parsing=[Parsing from=27 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 27
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=28 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=  parsing=[Parsing from=29 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 29
 possible (looking for a) observedPopToken=( parsing=[Parsing from=30 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=30
 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=31 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm
 possible (looking for a) observedPopToken=  parsing=[Parsing from=32 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 32
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=33 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=  parsing=[Parsing from=34 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 34
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=35 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=36 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 36
 possible (looking for a) observedPopToken=world parsing=[Parsing from=37 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=  parsing=[Parsing from=38 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 38
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=39 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (40) and observePushToken=( (30) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=41 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 skipping whitespace at index 41
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=42 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (43) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (44) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","hello",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): abc
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 5
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ghijk
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=world parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","world",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Test pass: Treemap size 3 hello returns world, both equal world
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Tm# parsing=[Parsing from=2 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Treemap parsing=[Parsing from=4 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Treemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=6 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=( parsing=[Parsing from=9 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=9
 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=10 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=Em# parsing=[Parsing from=12 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em#
 Start observePushToken=( at observePushToken_tokenIndex=13
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=14 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=15 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 15
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=16 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (17) and observePushToken=( (13) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=18 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 18
 possible (looking for a) observedPopToken=abc parsing=[Parsing from=19 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=abc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=20 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 20
 possible (looking for a) observedPopToken=5 parsing=[Parsing from=21 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=5
 possible (looking for a) observedPopToken=  parsing=[Parsing from=22 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 22
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=23 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (9) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=25 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 25
 possible (looking for a) observedPopToken=ghijk parsing=[Parsing from=26 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ghijk
 possible (looking for a) observedPopToken=  parsing=[Parsing from=27 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 27
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=28 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=  parsing=[Parsing from=29 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 29
 possible (looking for a) observedPopToken=( parsing=[Parsing from=30 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=30
 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=31 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm
 possible (looking for a) observedPopToken=  parsing=[Parsing from=32 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 32
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=33 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=  parsing=[Parsing from=34 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 34
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=35 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=36 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 36
 possible (looking for a) observedPopToken=world parsing=[Parsing from=37 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=  parsing=[Parsing from=38 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 38
 possible (looking for a) observedPopToken=Em parsing=[Parsing from=39 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em
 possible (looking for a) observedPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (40) and observePushToken=( (30) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=41 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 skipping whitespace at index 41
 possible (looking for a) observedPopToken=ghijk parsing=[Parsing from=42 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ghijk
 possible (looking for a) observedPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (43) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (44) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","ghijk",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): abc
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 5
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ghijk
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ghijk
 Wrapping string of 5 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","6",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","6",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","6",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","6",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Test pass: Treemap size 3 ghijk returns 6, both equal 6
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Tm# parsing=[Parsing from=2 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Tm#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Treemap parsing=[Parsing from=4 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Treemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=6 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 8
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=9 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=9
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=10 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Tm
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 11
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Em# parsing=[Parsing from=12 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Em#
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=13
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=14 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=EmptyTreemap
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=15 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 15
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=16 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=GodelLessThan
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (17) and observePushToken=( (13) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=17 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=18 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 18
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=abc parsing=[Parsing from=19 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=abc
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=20 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 20
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=5 parsing=[Parsing from=21 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=22 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 22
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Em parsing=[Parsing from=23 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Em
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (9) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=25 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 25
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ghijk parsing=[Parsing from=26 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ghijk
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=27 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 27
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=6 parsing=[Parsing from=28 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=6
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=29 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 29
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=30 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=30
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Tm parsing=[Parsing from=31 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Tm
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=32 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 32
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Em parsing=[Parsing from=33 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Em
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=34 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 34
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=hello parsing=[Parsing from=35 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=hello
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=36 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 36
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=world parsing=[Parsing from=37 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=world
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=38 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 38
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Em parsing=[Parsing from=39 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Em
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (40) and observePushToken=( (30) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=41 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 41
 possible (looking for a) observedPopToken=bbb parsing=[Parsing from=42 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bbb
 possible (looking for a) observedPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (43) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=43 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (44) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=44 toExcl=0 toklen=45 stacklen=1 tokens=["(","(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","(","Tm"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","abc"," ","5"," ","Em",")"," ","ghijk"," ","6"," ","(","Tm"," ","Em"," ","hello"," ","world"," ","Em",")"," ","bbb",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): abc
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 5
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ghijk
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bbb
 Wrapping string of 3 chars
 Test pass: Treemap size 3 bbb not found returns U, both equal U
 Test pass: PutNoBal first key/val into an EmptyTreemap, both equal (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) L R Em)
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=1 parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","1",")"] maxParseSteps=0]
 tokensToParseTree firstToken=1
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","1",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","1",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","1",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 1
 Test pass: treemapHeight of (EmptyTreemap GodelLessthan), both equal 1
 Wrapping string of 1 chars
 Wrapping string of 1 chars
 Test pass: treemapHeight of CD, both equal 2
 Wrapping string of 1 chars
 Wrapping string of 1 chars
 Test pass: treemapHeight of CDEF, both equal 3
 Wrapping string of 1 chars
 Wrapping string of 1 chars
 Wrapping string of 1 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=b parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","b",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","b",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","b",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","b",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Test pass: ABCDEF a -> b, both equal b
 Wrapping string of 1 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=d parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","d",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","d",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","d",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","d",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Test pass: ABCDEF c -> d, both equal d
 Wrapping string of 1 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=f parsing=[Parsing from=1 toExcl=0 toklen=3 stacklen=1 tokens=["(","f",")"] maxParseSteps=0]
 tokensToParseTree firstToken=f
 possible (looking for a) observedPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","f",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (2) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","f",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=2 toExcl=0 toklen=3 stacklen=1 tokens=["(","f",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): f
 Wrapping string of 1 chars
 Test pass: ABCDEF e -> f, both equal f
 Wrapping string of 1 chars
 Test pass: content-type of double is d and goes in a TypevalC, both equal (TypevalC d)
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=AA# parsing=[Parsing from=1 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=AA#
 possible (looking for a) observedPopToken=BB# parsing=[Parsing from=3 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=BB#
 Start observePushToken=( at observePushToken_tokenIndex=4
 possible (looking for a) observedPopToken=* parsing=[Parsing from=5 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=* parsing=[Parsing from=7 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (8) and observePushToken=( (4) expectPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (9) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=10 stacklen=1 tokens=["(","AA#",",","BB#","(","*"," ","*",")",")"] maxParseSteps=0]
 Test pass: namingWithUnarySyntax 1tf, both equal AA#,BB#(* *)
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=, parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=, parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=_ parsing=[Parsing from=3 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=_
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=4
 possible (looking for a) observedPopToken=a parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=b parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=c parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (10) and observePushToken=[ (4) expectPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(",",",",","_","[","a"," ","b"," ","c","]",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Test pass: Before naming it Abc: eval of ,,_[a b c] tostring is same, both equal ,,_[a b c]
 Doing vm.namesAttachRightToLeftInUnary==true tests
 Test pass: namingWithUnarySyntax 2t, both equal AA
 Test pass: namingWithUnarySyntax 3t, both equal T
 Test pass: namingWithUnarySyntax 4t, both equal ,
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=1 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=AA# parsing=[Parsing from=2 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=AA#
 possible (looking for a) observedPopToken=BB# parsing=[Parsing from=4 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=BB#
 Start observePushToken=( at observePushToken_tokenIndex=5
 possible (looking for a) observedPopToken=* parsing=[Parsing from=6 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=* parsing=[Parsing from=8 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (9) and observePushToken=( (5) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=AA parsing=[Parsing from=11 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=AA
 possible (looking for a) observedPopToken=] parsing=[Parsing from=12 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (12) and observePushToken=[ (1) expectPopToken=] parsing=[Parsing from=12 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=12 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (13) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=14 stacklen=1 tokens=["(","[","AA#",",","BB#","(","*"," ","*",")"," ","AA","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=1 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=( parsing=[Parsing from=2 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=2
 possible (looking for a) observedPopToken=T parsing=[Parsing from=3 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=( parsing=[Parsing from=5 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=5
 possible (looking for a) observedPopToken=* parsing=[Parsing from=6 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=* parsing=[Parsing from=8 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (9) and observePushToken=( (5) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=9 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (2) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=( parsing=[Parsing from=12 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=12
 possible (looking for a) observedPopToken=T parsing=[Parsing from=13 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=* parsing=[Parsing from=16 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=* parsing=[Parsing from=18 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (19) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (20) and observePushToken=( (12) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (21) and observePushToken=[ (1) expectPopToken=] parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (22) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","[","(","T"," ","(","*"," ","*",")",")"," ","(","T"," ","(","*"," ","*",")",")","]",")"] maxParseSteps=0]
 Test pass: namingWithUnarySyntax 5t, both equal [AA#,BB#(* *) AA]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=1 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Comcomundabc# parsing=[Parsing from=2 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Comcomundabc#
 possible (looking for a) observedPopToken=Commaunderscoreabc# parsing=[Parsing from=4 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Commaunderscoreabc#
 possible (looking for a) observedPopToken=_ parsing=[Parsing from=6 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=_
 possible (looking for a) observedPopToken=Abc# parsing=[Parsing from=7 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Abc#
 Start observePushToken=[ at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=a parsing=[Parsing from=9 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=b parsing=[Parsing from=11 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=c parsing=[Parsing from=13 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=] parsing=[Parsing from=14 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (14) and observePushToken=[ (8) expectPopToken=] parsing=[Parsing from=14 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=14 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=15 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 15
 possible (looking for a) observedPopToken=Abc parsing=[Parsing from=16 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Abc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=left parsing=[Parsing from=18 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=left
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=( parsing=[Parsing from=20 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=20
 possible (looking for a) observedPopToken=L parsing=[Parsing from=21 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=22 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 22
 possible (looking for a) observedPopToken=Commaunderscoreabc parsing=[Parsing from=23 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Commaunderscoreabc
 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (20) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=25 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 25
 possible (looking for a) observedPopToken=right parsing=[Parsing from=26 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=right
 possible (looking for a) observedPopToken=  parsing=[Parsing from=27 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 27
 possible (looking for a) observedPopToken=( parsing=[Parsing from=28 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=28
 possible (looking for a) observedPopToken=R parsing=[Parsing from=29 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=  parsing=[Parsing from=30 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 30
 possible (looking for a) observedPopToken=Commaunderscoreabc parsing=[Parsing from=31 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Commaunderscoreabc
 possible (looking for a) observedPopToken=) parsing=[Parsing from=32 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (32) and observePushToken=( (28) expectPopToken=) parsing=[Parsing from=32 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=32 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=33 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 33
 possible (looking for a) observedPopToken=labc parsing=[Parsing from=34 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=labc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=35 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 35
 possible (looking for a) observedPopToken=( parsing=[Parsing from=36 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=36
 possible (looking for a) observedPopToken=L parsing=[Parsing from=37 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=38 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 38
 possible (looking for a) observedPopToken=Abc parsing=[Parsing from=39 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Abc
 possible (looking for a) observedPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (40) and observePushToken=( (36) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=40 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=41 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 41
 possible (looking for a) observedPopToken=rabc parsing=[Parsing from=42 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=rabc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=43 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 43
 possible (looking for a) observedPopToken=( parsing=[Parsing from=44 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=44
 possible (looking for a) observedPopToken=R parsing=[Parsing from=45 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=  parsing=[Parsing from=46 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 46
 possible (looking for a) observedPopToken=Abc parsing=[Parsing from=47 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Abc
 possible (looking for a) observedPopToken=) parsing=[Parsing from=48 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (48) and observePushToken=( (44) expectPopToken=) parsing=[Parsing from=48 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=48 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=49 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (49) and observePushToken=[ (1) expectPopToken=] parsing=[Parsing from=49 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=49 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=50 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (50) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=50 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=50 toExcl=0 toklen=51 stacklen=1 tokens=["(","[","Comcomundabc#",",","Commaunderscoreabc#",",","_","Abc#","[","a"," ","b"," ","c","]"," ","Abc"," ","left"," ","(","L"," ","Commaunderscoreabc",")"," ","right"," ","(","R"," ","Commaunderscoreabc",")"," ","labc"," ","(","L"," ","Abc",")"," ","rabc"," ","(","R"," ","Abc",")","]",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): left
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): right
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): labc
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): rabc
 Wrapping string of 4 chars
 Test pass: namingWithUnarySyntax 6t, both equal [Comcomundabc#,Commaunderscoreabc#,_Abc#[a b c] Abc left T right _Abc labc [a b] rabc c]
 Test pass: namingWithUnarySyntax 25tf, both equal BB
 Test pass: namingWithUnarySyntax 26tf, both equal T
 Test pass: namingWithUnarySyntax 27tf, both equal BB#(* *)
 Test pass: namingWithUnarySyntax 28tf, both equal *
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Pl# parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pl#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=L parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=Pl parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pl
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pl#","(","Pair"," ","L",")"," ","Pl",")",")"] maxParseSteps=0]
 Test pass: lambda tostring name of prefix with childs, (Pl#(Pair L) Pl), both equal (Pl#(Pair L) Pl)
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Pm# parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pm#
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=L parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=x parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=x
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pm#","(","Pair"," ","L",")"," ","x",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): x
 Wrapping string of 1 chars
 Test pass: lambda tostring name of prefix with childs, (Pm#(Pair L) x), both equal (Pm#(Pair L) x)
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Pn# parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pn#
 Start observePushToken=[ at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=R parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=] parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (7) and observePushToken=[ (3) expectPopToken=] parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=x parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=x
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","(","Pn#","[","Pair"," ","R","]"," ","x",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): x
 Wrapping string of 1 chars
 Test pass: lambda tostring name of prefix with childs, (Pn#[Pair R] x), both equal [Pn#[Pair R] x]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=+ parsing=[Parsing from=2 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=+
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=( parsing=[Parsing from=4 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=4
 possible (looking for a) observedPopToken=* parsing=[Parsing from=5 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=7 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=9 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (4) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=( parsing=[Parsing from=12 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=12
 possible (looking for a) observedPopToken=* parsing=[Parsing from=13 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=8 parsing=[Parsing from=15 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=8
 possible (looking for a) observedPopToken=  parsing=[Parsing from=16 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 16
 possible (looking for a) observedPopToken=8 parsing=[Parsing from=17 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=8
 possible (looking for a) observedPopToken=) parsing=[Parsing from=18 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (18) and observePushToken=( (12) expectPopToken=) parsing=[Parsing from=18 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=18 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (19) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (20) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=21 stacklen=1 tokens=["(","(","+"," ","(","*"," ","6"," ","6",")"," ","(","*"," ","8"," ","8",")",")",")"] maxParseSteps=0]
2 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
2 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 8
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=** parsing=[Parsing from=2 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=**
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=10 parsing=[Parsing from=4 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=10
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=2 parsing=[Parsing from=6 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=2
 possible (looking for a) observedPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (7) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=7 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (8) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=8 toExcl=0 toklen=9 stacklen=1 tokens=["(","(","**"," ","10"," ","2",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 10
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 2
 Test pass: 6*6+8*8===10**2, both equal 100
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken={ parsing=[Parsing from=1 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=2 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=2
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=3 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=world parsing=[Parsing from=5 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=] parsing=[Parsing from=6 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (6) and observePushToken=[ (2) expectPopToken=] parsing=[Parsing from=6 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=6 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=abc parsing=[Parsing from=8 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=abc
 possible (looking for a) observedPopToken=} parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (9) and observePushToken={ (1) expectPopToken=} parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","{","[","hello"," ","world","]"," ","abc","}",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): abc
 Wrapping string of 3 chars
 Test pass: [ and ] display in {[hello world] abc}. It was displaying as {hello world abc}, both equal {[hello world] abc}
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=a parsing=[Parsing from=2 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=> parsing=[Parsing from=3 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (3) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=3 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=3 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=4 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (4) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=4 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=4 toExcl=0 toklen=5 stacklen=1 tokens=["(","<","a",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Test pass: <a> becomes ,a, both equal ,a
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=a parsing=[Parsing from=2 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=b parsing=[Parsing from=4 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=> parsing=[Parsing from=5 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (5) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=5 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=5 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=6 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (6) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=6 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=6 toExcl=0 toklen=7 stacklen=1 tokens=["(","<","a"," ","b",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Test pass: <a b> parses and tostrings to itself, both equal <a b>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=< parsing=[Parsing from=2 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=2
 possible (looking for a) observedPopToken=a parsing=[Parsing from=3 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=b parsing=[Parsing from=5 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=c parsing=[Parsing from=7 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=> parsing=[Parsing from=8 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (8) and observePushToken=< (2) expectPopToken=> parsing=[Parsing from=8 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=8 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=9 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 9
 possible (looking for a) observedPopToken=d parsing=[Parsing from=10 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=e parsing=[Parsing from=12 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=e
 possible (looking for a) observedPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (13) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (14) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=14 toExcl=0 toklen=15 stacklen=1 tokens=["(","<","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): e
 Wrapping string of 1 chars
 Test pass: <<a b c> d e> parses and tostrings to itself, both equal <<a b c> d e>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=, parsing=[Parsing from=2 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=, parsing=[Parsing from=3 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=, parsing=[Parsing from=4 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=, parsing=[Parsing from=5 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=, parsing=[Parsing from=6 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=< parsing=[Parsing from=7 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=7
 possible (looking for a) observedPopToken=a parsing=[Parsing from=8 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=9 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 9
 possible (looking for a) observedPopToken=b parsing=[Parsing from=10 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=c parsing=[Parsing from=12 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (13) and observePushToken=< (7) expectPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=13 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=d parsing=[Parsing from=15 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=  parsing=[Parsing from=16 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 16
 possible (looking for a) observedPopToken=e parsing=[Parsing from=17 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=e
 possible (looking for a) observedPopToken=> parsing=[Parsing from=18 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (18) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=18 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=18 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (19) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=20 stacklen=1 tokens=["(","<",",",",",",",",",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): e
 Wrapping string of 1 chars
 Test pass: <,,,,,<a b c> d e> parses and tostrings to itself, both equal <,,,,,<a b c> d e>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=, parsing=[Parsing from=2 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=< parsing=[Parsing from=3 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=a parsing=[Parsing from=4 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=b parsing=[Parsing from=6 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=c parsing=[Parsing from=8 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=> parsing=[Parsing from=9 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (9) and observePushToken=< (3) expectPopToken=> parsing=[Parsing from=9 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=9 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=d parsing=[Parsing from=11 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=e parsing=[Parsing from=13 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=e
 possible (looking for a) observedPopToken=> parsing=[Parsing from=14 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (14) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=14 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=14 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=15 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (15) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=15 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=15 toExcl=0 toklen=16 stacklen=1 tokens=["(","<",",","<","a"," ","b"," ","c",">"," ","d"," ","e",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): e
 Wrapping string of 1 chars
 Test pass: <,<a b c> d e> parses and tostrings to itself, both equal <,<a b c> d e>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=< parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=world parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=< parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=6
 possible (looking for a) observedPopToken=< parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=7
 possible (looking for a) observedPopToken=< parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=a parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=b parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=c parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=d parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=e parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=e
 possible (looking for a) observedPopToken=] parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (19) and observePushToken=[ (15) expectPopToken=] parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 20
 possible (looking for a) observedPopToken=f parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=f
 possible (looking for a) observedPopToken=> parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (22) and observePushToken=< (8) expectPopToken=> parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 23
 possible (looking for a) observedPopToken=g parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=g
 possible (looking for a) observedPopToken=> parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (25) and observePushToken=< (7) expectPopToken=> parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=zz parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 tokensToParseTree firstToken=zz
 possible (looking for a) observedPopToken=> parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (28) and observePushToken=< (6) expectPopToken=> parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=> parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (29) and observePushToken=< (1) expectPopToken=> parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","<","hello"," ","world"," ","<","<","<","a"," ","b"," ","c"," ","[","d"," ","e","]"," ","f",">"," ","g",">"," ","zz",">",">",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): e
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): f
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): g
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): zz
 Wrapping string of 2 chars
 Test pass: <hello world <<<a b c [d e] f> g> zz>> parses and tostrings to itself, both equal <hello world <<<a b c [d e] f> g> zz>>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken={ parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=, parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=a parsing=[Parsing from=3 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=b parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=c parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=d parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (10) and observePushToken={ (1) expectPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Test pass: {,a b c d} becomes <a b c d>, both equal <a b c d>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken={ parsing=[Parsing from=1 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=, parsing=[Parsing from=2 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=a parsing=[Parsing from=3 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=b parsing=[Parsing from=5 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=6 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 6
 possible (looking for a) observedPopToken=c parsing=[Parsing from=7 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=d parsing=[Parsing from=9 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (10) and observePushToken={ (1) expectPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=10 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=12 stacklen=1 tokens=["(","{",",","a"," ","b"," ","c"," ","d","}",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
 Wrapping string of 1 chars
 Test pass: {,a b c d} becomes <a b c d>, both equal <a b c d>
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=< parsing=[Parsing from=2 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=2
 possible (looking for a) observedPopToken=+ parsing=[Parsing from=3 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=+
 possible (looking for a) observedPopToken=  parsing=[Parsing from=4 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 4
 possible (looking for a) observedPopToken=< parsing=[Parsing from=5 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=<
 Start observePushToken=< at observePushToken_tokenIndex=5
 possible (looking for a) observedPopToken=* parsing=[Parsing from=6 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=I# parsing=[Parsing from=8 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=I#
 Start observePushToken=( at observePushToken_tokenIndex=9
 possible (looking for a) observedPopToken=F parsing=[Parsing from=10 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=F
 possible (looking for a) observedPopToken=  parsing=[Parsing from=11 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 11
 possible (looking for a) observedPopToken=U parsing=[Parsing from=12 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (13) and observePushToken=( (9) expectPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=13 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=I parsing=[Parsing from=15 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=I
 possible (looking for a) observedPopToken=> parsing=[Parsing from=16 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (16) and observePushToken=< (5) expectPopToken=> parsing=[Parsing from=16 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=16 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=, parsing=[Parsing from=18 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=,
 possible (looking for a) observedPopToken=3 parsing=[Parsing from=19 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=3
 possible (looking for a) observedPopToken=> parsing=[Parsing from=20 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: > (20) and observePushToken=< (2) expectPopToken=> parsing=[Parsing from=20 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 end loop, observePushToken=< observedPopToken=> expectPopToken=> parsing=[Parsing from=20 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=10 parsing=[Parsing from=22 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=10
 possible (looking for a) observedPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (23) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=23 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (24) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=24 toExcl=0 toklen=25 stacklen=1 tokens=["(","(","<","+"," ","<","*"," ","I#","(","F"," ","U",")"," ","I",">"," ",",","3",">"," ","10",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 3
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 10
 Test pass: (<+ <* I#(F U) I> ,3> 10), both equal 103
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=c parsing=[Parsing from=4 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=d parsing=[Parsing from=6 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=d
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 7
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=8
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 10
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=a parsing=[Parsing from=11 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=a
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 12
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=b parsing=[Parsing from=13 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=b
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 14
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=15
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=16 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=EmptyTreemap
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 17
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=18 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=GodelLessThan
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (19) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=19 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (20) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=20 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (21) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=21 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (22) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=23 stacklen=1 tokens=["(","(","Put"," ","c"," ","d"," ","(","Put"," ","a"," ","b"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:5313 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
Wikibinator203VM.js:5313 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=0
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=1
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 3
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=aa
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=bb
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 7
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=8
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=23 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=25 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (26) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=26 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (27) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=27 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (28) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=28 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (29) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=29 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=31 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ee
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 26
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ff
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 28
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=29
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=EmptyTreemap
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 31
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=GodelLessThan
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:5313 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=0
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=1
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 3
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ww
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=xx
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 7
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=8
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","ee"," ","ff"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","cc"," ","dd"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","Put"," ","aa"," ","bb"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=bb
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 7
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=8
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 10
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=cc
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 12
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=dd
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 14
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=15
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 17
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ee
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 19
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ff
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 21
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=22
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 24
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ww
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 26
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=xx
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 28
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=29
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=EmptyTreemap
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 31
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=GodelLessThan
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 10
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=aa
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 12
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=bb
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 14
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=15
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 17
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ee parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ee
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 19
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ff parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ff
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 21
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=22
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=Put
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 24
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=ww
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 26
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=xx
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 28
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=29
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=EmptyTreemap
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 31
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=GodelLessThan
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
Wikibinator203VM.js:3563 Wrapping string of 2 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
Wikibinator203VM.js:3563 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","cc"," ","dd"," ","(","Put"," ","ee"," ","ff"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=( parsing=[Parsing from=1 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=2 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 3
 possible (looking for a) observedPopToken=ee parsing=[Parsing from=4 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ee
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=ff parsing=[Parsing from=6 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ff
 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 7
 possible (looking for a) observedPopToken=( parsing=[Parsing from=8 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=8
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=9 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=10 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 10
 possible (looking for a) observedPopToken=cc parsing=[Parsing from=11 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=cc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=dd parsing=[Parsing from=13 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=dd
 possible (looking for a) observedPopToken=  parsing=[Parsing from=14 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 14
 possible (looking for a) observedPopToken=( parsing=[Parsing from=15 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=16 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=17 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 17
 possible (looking for a) observedPopToken=aa parsing=[Parsing from=18 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=aa
 possible (looking for a) observedPopToken=  parsing=[Parsing from=19 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 19
 possible (looking for a) observedPopToken=bb parsing=[Parsing from=20 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=bb
 possible (looking for a) observedPopToken=  parsing=[Parsing from=21 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 21
 possible (looking for a) observedPopToken=( parsing=[Parsing from=22 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=22
 possible (looking for a) observedPopToken=Put parsing=[Parsing from=23 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Put
 possible (looking for a) observedPopToken=  parsing=[Parsing from=24 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 24
 possible (looking for a) observedPopToken=ww parsing=[Parsing from=25 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ww
 possible (looking for a) observedPopToken=  parsing=[Parsing from=26 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 26
 possible (looking for a) observedPopToken=xx parsing=[Parsing from=27 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=xx
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=( parsing=[Parsing from=29 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=29
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=30 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=32 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (33) and observePushToken=( (29) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=33 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (34) and observePushToken=( (22) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=34 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (35) and observePushToken=( (15) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=35 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (36) and observePushToken=( (8) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=36 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (37) and observePushToken=( (1) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=37 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (38) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=38 toExcl=0 toklen=39 stacklen=1 tokens=["(","(","Put"," ","ee"," ","ff"," ","(","Put"," ","cc"," ","dd"," ","(","Put"," ","aa"," ","bb"," ","(","Put"," ","ww"," ","xx"," ","(","EmptyTreemap"," ","GodelLessThan",")",")",")",")",")",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ee
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ff
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): cc
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): dd
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): aa
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): bb
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ww
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): xx
 Wrapping string of 2 chars
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.
 Passed very basic vm.eval tests
 Passed more tests, this time that can use vm.eval
 this=[object Window]
 Script ended. Wikibinator203 = U which is the universal combinator/lambda you can build anything with. Nobody owns the lambdas made of combos of calling the universal lambda on itself (such as Wikibinator203(Wikibinator203)(Wikibinator203(Wikibinator203)))=Op101 aka opcode 5 (0 to 255) aka Op101 in base2, and see license for details about that. By design, there are an infinite number of possible variants of https://en.wikipedia.org/wiki/Technological_singularity which Wikibinator203 may generate (or it may do other simpler things) but only as, kind of, lazy-evals. It is by design neutral. It does not tend to do that on its own (but even a broken clock is right twice a day, so whatever may already have execute permission on your computer (including unknown hackers, or some generated lambda may, if you view it as a conversation or as text etc, ask you to give it more permissions, so like they say about email, dont run any files received)...) - may not execute anything ever for any reason, as it has "recursively-tightenable-higher-on-stack permissions system" (search comments in this file or earlier versions of it) whose max level is sandbox (though an opensource fork of it could give execute or higher permissions similarly as long as its stateless, thats probably not a good idea). If a "singularity" is to happen, then it should support https://en.wikipedia.org/wiki/Breakpoint and, as motivation to it or to more generally any user(s), this system should (TODO verify) in practice be able to EFFICIENTLY run a debugger of a debugger of a debugger of a debugger (like a Hypervisor/VMWare/etc inside a Hypervisor/VMWare/etc inside... except those kinds of VMs are far to complex to do efficiently in this system, as this is more of a nanokernel or smaller/simpler), just a few levels deep, as compute is the bottleneck there, but in abstract math can do that to any finite depth, even in the middle of a "optimization to throw sound processing code faster than the speed of sound from one computer to a nearby computer which formal-verifies, compiles, and runs that code in time to hear the sound arrive and think about and respond.".


There are 192 extra tests in Wikibinator203.n.vm.extraTests, which are either slow or failing which is why I put them there instead of the few basic tests it runs before VM script ends. Maybe the UI should have a button to run those, then find errors on browser console, where its easier to use them cuz u have a UI.
 loadOpsByName=true
 Created var for opcode as lambda: window.U
 Created var for opcode as lambda: window.Op10
 Created var for opcode as lambda: window.Op11
 Created var for opcode as lambda: window.Op100
 Created var for opcode as lambda: window.Op101
 Created var for opcode as lambda: window.Op110
 Created var for opcode as lambda: window.Op111
 Created var for opcode as lambda: window.Op1000
 Created var for opcode as lambda: window.Op1001
 Created var for opcode as lambda: window.Op1010
 Created var for opcode as lambda: window.Op1011
 Created var for opcode as lambda: window.Op1100
 Created var for opcode as lambda: window.Op1101
 Created var for opcode as lambda: window.Op1110
 Created var for opcode as lambda: window.Op1111
 Created var for opcode as lambda: window.Op10000
 Created var for opcode as lambda: window.Op10001
 Created var for opcode as lambda: window.Op10010
 Created var for opcode as lambda: window.Op10011
 Created var for opcode as lambda: window.Op10100
 Created var for opcode as lambda: window.Op10101
 Created var for opcode as lambda: window.Op10110
 Created var for opcode as lambda: window.Op10111
 Created var for opcode as lambda: window.Op11000
 Created var for opcode as lambda: window.Op11001
 Created var for opcode as lambda: window.Op11010
 Created var for opcode as lambda: window.Op11011
 Created var for opcode as lambda: window.Op11100
 Created var for opcode as lambda: window.Op11101
 Created var for opcode as lambda: window.Op11110
 Created var for opcode as lambda: window.Op11111
 Created var for opcode as lambda: window.Op100000
 Created var for opcode as lambda: window.Op100001
 Created var for opcode as lambda: window.Op100010
 Created var for opcode as lambda: window.Op100011
 Created var for opcode as lambda: window.Op100100
 Created var for opcode as lambda: window.Op100101
 Created var for opcode as lambda: window.Op100110
 Created var for opcode as lambda: window.Op100111
 Created var for opcode as lambda: window.Op101000
 Created var for opcode as lambda: window.Op101001
 Created var for opcode as lambda: window.Op101010
 Created var for opcode as lambda: window.Op101011
 Created var for opcode as lambda: window.Op101100
 Created var for opcode as lambda: window.Op101101
 Created var for opcode as lambda: window.Op101110
 Created var for opcode as lambda: window.Op101111
 Created var for opcode as lambda: window.Op110000
 Created var for opcode as lambda: window.Op110001
 Created var for opcode as lambda: window.Op110010
 Created var for opcode as lambda: window.Op110011
 Created var for opcode as lambda: window.Op110100
 Created var for opcode as lambda: window.Op110101
 Created var for opcode as lambda: window.Op110110
 Created var for opcode as lambda: window.Op110111
 Created var for opcode as lambda: window.Op111000
 Created var for opcode as lambda: window.Op111001
 Created var for opcode as lambda: window.Op111010
 Created var for opcode as lambda: window.Op111011
 Created var for opcode as lambda: window.Op111100
 Created var for opcode as lambda: window.Op111101
 Created var for opcode as lambda: window.Op111110
 Created var for opcode as lambda: window.Op111111
 Created var for opcode as lambda: window.Op1000000
 Created var for opcode as lambda: window.Op1000001
 Created var for opcode as lambda: window.Op1000010
 Created var for opcode as lambda: window.Op1000011
 Created var for opcode as lambda: window.Op1000100
 Created var for opcode as lambda: window.Op1000101
 Created var for opcode as lambda: window.Op1000110
 Created var for opcode as lambda: window.Op1000111
 Created var for opcode as lambda: window.Op1001000
 Created var for opcode as lambda: window.Op1001001
 Created var for opcode as lambda: window.Op1001010
 Created var for opcode as lambda: window.Op1001011
 Created var for opcode as lambda: window.Op1001100
 Created var for opcode as lambda: window.Op1001101
 Created var for opcode as lambda: window.Op1001110
 Created var for opcode as lambda: window.Op1001111
 Created var for opcode as lambda: window.Op1010000
 Created var for opcode as lambda: window.Op1010001
 Created var for opcode as lambda: window.Op1010010
 Created var for opcode as lambda: window.Op1010011
 Created var for opcode as lambda: window.Op1010100
 Created var for opcode as lambda: window.Op1010101
 Created var for opcode as lambda: window.Op1010110
 Created var for opcode as lambda: window.Op1010111
 Created var for opcode as lambda: window.Op1011000
 Created var for opcode as lambda: window.Op1011001
 Created var for opcode as lambda: window.Op1011010
 Created var for opcode as lambda: window.Op1011011
 Created var for opcode as lambda: window.Op1011100
 Created var for opcode as lambda: window.Op1011101
 Created var for opcode as lambda: window.Op1011110
 Created var for opcode as lambda: window.Op1011111
 Created var for opcode as lambda: window.Op1100000
 Created var for opcode as lambda: window.Op1100001
 Created var for opcode as lambda: window.Op1100010
 Created var for opcode as lambda: window.Op1100011
 Created var for opcode as lambda: window.Op1100100
 Created var for opcode as lambda: window.Op1100101
 Created var for opcode as lambda: window.Op1100110
 Created var for opcode as lambda: window.Op1100111
 Created var for opcode as lambda: window.Op1101000
 Created var for opcode as lambda: window.Op1101001
 Created var for opcode as lambda: window.Op1101010
 Created var for opcode as lambda: window.Op1101011
 Created var for opcode as lambda: window.Op1101100
 Created var for opcode as lambda: window.Op1101101
 Created var for opcode as lambda: window.Op1101110
 Created var for opcode as lambda: window.Op1101111
 Created var for opcode as lambda: window.Op1110000
 Created var for opcode as lambda: window.Op1110001
 Created var for opcode as lambda: window.Op1110010
 Created var for opcode as lambda: window.Op1110011
 Created var for opcode as lambda: window.Op1110100
 Created var for opcode as lambda: window.Op1110101
 Created var for opcode as lambda: window.Op1110110
 Created var for opcode as lambda: window.Op1110111
 Created var for opcode as lambda: window.Op1111000
 Created var for opcode as lambda: window.Op1111001
 Created var for opcode as lambda: window.Op1111010
 Created var for opcode as lambda: window.Op1111011
 Created var for opcode as lambda: window.Op1111100
 Created var for opcode as lambda: window.Op1111101
 Created var for opcode as lambda: window.Op1111110
 Created var for opcode as lambda: window.Op1111111
 Created var for opcode as lambda: window.F
 Created var for opcode as lambda: window.T
 Created var for opcode as lambda: window.Bit0
 Created var for opcode as lambda: window.Bit1
 Created var for opcode as lambda: window.L
 Created var for opcode as lambda: window.R
 Created var for opcode as lambda: window.Isleaf
 Created var for opcode as lambda: window.OpByte
 Created var for opcode as lambda: window.CurleftByte
 Created var for opcode as lambda: window.MaskByte
 Created var for opcode as lambda: window.Infcur
 Created var for opcode as lambda: window.Rucfni
 Created var for opcode as lambda: window.S
 Created var for opcode as lambda: window.Pair
 Created var for opcode as lambda: window.TypevalB
 Created var for opcode as lambda: window.TypevalC
 Created var for opcode as lambda: window.VarargAx
 Created var for opcode as lambda: window.Lambdo
 Created var for opcode as lambda: window.P
 Created var for opcode as lambda: window.GetVarFn
 Created var for opcode as lambda: window.GetVarDouble
 Created var for opcode as lambda: window.GetVarDoubles
 Created var for opcode as lambda: window.Hyperleaf
 Created var for opcode as lambda: window.HyperGreen
 Created var for opcode as lambda: window.HyperBlue
 Created var for opcode as lambda: window.HyperRed
 Created var for opcode as lambda: window.EmptyTreemap
 Created var for opcode as lambda: window.Treemap
 Created var for opcode as lambda: window.DoAvlBal
 Created var for opcode as lambda: window.AvlHeightD
 Created var for opcode as lambda: window.PutNoBal
 Created var for opcode as lambda: window.Put
 Created var for opcode as lambda: window.Del
 Created var for opcode as lambda: window.TreemapHas
 Created var for opcode as lambda: window.GodelLessThan
 Created var for opcode as lambda: window.ChainLessThan
 Created var for opcode as lambda: window.IdThenGodelLessThan
 Created var for opcode as lambda: window.?
 Created var for opcode as lambda: window.?C
 Created var for opcode as lambda: window.??
 Created var for opcode as lambda: window.TreemapNorm
 Created var for opcode as lambda: window.TreemapVerify
 Created var for opcode as lambda: window.TapeSlideL
 Created var for opcode as lambda: window.TapeSlideR
 Created var for opcode as lambda: window.TapeCopy
 Created var for opcode as lambda: window.TapePaste
 Created var for opcode as lambda: window.TapeCall
 Created var for opcode as lambda: window.TapeInfcur
 Created var for opcode as lambda: window.TapeRucfni
 Created var for opcode as lambda: window.TapeGetL
 Created var for opcode as lambda: window.TapeGetRegister
 Created var for opcode as lambda: window.TapeGetCenter
 Created var for opcode as lambda: window.TapeGetLR
 Created var for opcode as lambda: window.TapeGetR
 Created var for opcode as lambda: window.D
 Created var for opcode as lambda: window.Du
 Created var for opcode as lambda: window.DuE
 Created var for opcode as lambda: window.DE
 Created var for opcode as lambda: window.DGo
 Created var for opcode as lambda: window.DuGo
 Created var for opcode as lambda: window.PrimSize
 Created var for opcode as lambda: window.TGet
 Created var for opcode as lambda: window.TPut
 Created var for opcode as lambda: window.BGet
 Created var for opcode as lambda: window.BPut
 Created var for opcode as lambda: window.KE
 Created var for opcode as lambda: window.KKE
 Created var for opcode as lambda: window.Bl
 Created var for opcode as lambda: window.OO
 Created var for opcode as lambda: window.GoO
 Created var for opcode as lambda: window.K?
 Created var for opcode as lambda: window.KK?
 Created var for opcode as lambda: window.+
 Created var for opcode as lambda: window.*
 Created var for opcode as lambda: window.Mi
 Created var for opcode as lambda: window.%
 Created var for opcode as lambda: window.Div
 Created var for opcode as lambda: window.++
 Created var for opcode as lambda: window.Mii
 Created var for opcode as lambda: window.**
 Created var for opcode as lambda: window.&
 Created var for opcode as lambda: window.|
 Created var for opcode as lambda: window.Xor
 Created var for opcode as lambda: window.~
 Created var for opcode as lambda: window.Shll
 Created var for opcode as lambda: window.Shrr
 Created var for opcode as lambda: window.Shrrr
 Created var for opcode as lambda: window.Neg
 Created var for opcode as lambda: window.Sine
 Created var for opcode as lambda: window.Sqrt
 Created var for opcode as lambda: window.Get32BitsInCbt
 Created var for opcode as lambda: window.Put32BitsInCbt
 Created var for opcode as lambda: window.Eq
 Created var for opcode as lambda: window.While
 Created var for opcode as lambda: window.DoWhile
 Created var for opcode as lambda: window.For
 Created var for opcode as lambda: window.Fo
 Created var for opcode as lambda: window.Foo
 Created var for opcode as lambda: window.IfElse
 Created var for opcode as lambda: window.If
 Created var for opcode as lambda: window.Lt
 Created var for opcode as lambda: window.Lte
 Created var for opcode as lambda: window.Gt
 Created var for opcode as lambda: window.Gte
 Created var for opcode as lambda: window.GetSalt128
 Created var for opcode as lambda: window.WithSalt128
 Created var for opcode as lambda: window.WithSalt128TransformedBy
 Created var for opcode as lambda: window.SolveRecog
 Created var for opcode as lambda: window.SolveFloat64
 Created var for opcode as lambda: window.Bize31
 Created var for opcode as lambda: window.Bize53
 Created var for opcode as lambda: window.Bize256
 Created var for opcode as lambda: window.LambdaParamsList
 Created var for opcode as lambda: window.LambdaParamsStream
 Created var for opcode as lambda: window.Seq
 Created var for opcode as lambda: window.HasMoreThan7Params
 Created var for opcode as lambda: window.EmulateUsingInt32s
 Created var for opcode as lambda: window.EmulateUsingInt16s
 Created var for opcode as lambda: window.EmulateUsingInt8s
 Created var for opcode as lambda: window.Car
 Created var for opcode as lambda: window.Cdr
 Created var for opcode as lambda: window.Op251ReservedForFutureExpansionAndInfloopsForNow
 Created var for opcode as lambda: window.Op252ReservedForFutureExpansionAndInfloopsForNow
 Created var for opcode as lambda: window.Op253ReservedForFutureExpansionAndInfloopsForNow
 Created var for opcode as lambda: window.Op254ReservedForFutureExpansionAndInfloopsForNow
 Created var for opcode as lambda: window.Op255ReservedForFutureExpansionAndInfloopsForNow
 Created var for opcode as lambda: window.λ
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=0
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=1 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=1
 possible (looking for a) observedPopToken=( parsing=[Parsing from=2 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=2
 possible (looking for a) observedPopToken=( parsing=[Parsing from=3 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=3
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=4 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 5
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=6 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=6
 possible (looking for a) observedPopToken=L parsing=[Parsing from=7 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=8 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 8
 possible (looking for a) observedPopToken=R parsing=[Parsing from=9 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (10) and observePushToken=[ (6) expectPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=10 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (11) and observePushToken=( (3) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=11 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=12 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 12
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=13 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=13
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=14 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=14
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=15 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=15
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=16 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 16
 possible (looking for a) observedPopToken=I# parsing=[Parsing from=17 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=I#
 Start observePushToken=( at observePushToken_tokenIndex=18
 possible (looking for a) observedPopToken=F parsing=[Parsing from=19 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=F
 possible (looking for a) observedPopToken=  parsing=[Parsing from=20 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 20
 possible (looking for a) observedPopToken=U parsing=[Parsing from=21 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (22) and observePushToken=( (18) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=22 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=23 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 23
 possible (looking for a) observedPopToken=Sqr# parsing=[Parsing from=24 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Sqr#
 Start observePushToken={ at observePushToken_tokenIndex=25
 possible (looking for a) observedPopToken=( parsing=[Parsing from=26 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=26
 possible (looking for a) observedPopToken=T parsing=[Parsing from=27 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=28 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 28
 possible (looking for a) observedPopToken=* parsing=[Parsing from=29 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=*
 possible (looking for a) observedPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (30) and observePushToken=( (26) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=30 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=31 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 31
 possible (looking for a) observedPopToken=I parsing=[Parsing from=32 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=I
 possible (looking for a) observedPopToken=  parsing=[Parsing from=33 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 33
 possible (looking for a) observedPopToken=I parsing=[Parsing from=34 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=I
 possible (looking for a) observedPopToken=} parsing=[Parsing from=35 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (35) and observePushToken={ (25) expectPopToken=} parsing=[Parsing from=35 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=35 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=36 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 36
 possible (looking for a) observedPopToken=Hypot# parsing=[Parsing from=37 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Hypot#
 Start observePushToken=( at observePushToken_tokenIndex=38
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=39 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 39
 possible (looking for a) observedPopToken=λ parsing=[Parsing from=40 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=λ
 possible (looking for a) observedPopToken=  parsing=[Parsing from=41 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 41
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=42 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=42
 possible (looking for a) observedPopToken=x parsing=[Parsing from=43 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=x
 possible (looking for a) observedPopToken=  parsing=[Parsing from=44 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 44
 possible (looking for a) observedPopToken=y parsing=[Parsing from=45 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=y
 possible (looking for a) observedPopToken=] parsing=[Parsing from=46 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (46) and observePushToken=[ (42) expectPopToken=] parsing=[Parsing from=46 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=46 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=47 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 47
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=48 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=48
 possible (looking for a) observedPopToken=this parsing=[Parsing from=49 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=this
 possible (looking for a) observedPopToken=  parsing=[Parsing from=50 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 50
 possible (looking for a) observedPopToken=is parsing=[Parsing from=51 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=is
 possible (looking for a) observedPopToken=  parsing=[Parsing from=52 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 52
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=53 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=53
 possible (looking for a) observedPopToken=a parsing=[Parsing from=54 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=55 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 55
 possible (looking for a) observedPopToken=comment parsing=[Parsing from=56 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=comment
 possible (looking for a) observedPopToken=] parsing=[Parsing from=57 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (57) and observePushToken=[ (53) expectPopToken=] parsing=[Parsing from=57 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=57 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=58 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 58
 possible (looking for a) observedPopToken=with parsing=[Parsing from=59 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=with
 possible (looking for a) observedPopToken=  parsing=[Parsing from=60 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 60
 possible (looking for a) observedPopToken=a parsing=[Parsing from=61 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=62 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 62
 possible (looking for a) observedPopToken=function parsing=[Parsing from=63 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=function
 possible (looking for a) observedPopToken=  parsing=[Parsing from=64 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 64
 possible (looking for a) observedPopToken=Sqr parsing=[Parsing from=65 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Sqr
 possible (looking for a) observedPopToken=  parsing=[Parsing from=66 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 66
 possible (looking for a) observedPopToken=in parsing=[Parsing from=67 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=in
 possible (looking for a) observedPopToken=  parsing=[Parsing from=68 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 68
 possible (looking for a) observedPopToken=it parsing=[Parsing from=69 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=it
 possible (looking for a) observedPopToken=] parsing=[Parsing from=70 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (70) and observePushToken=[ (48) expectPopToken=] parsing=[Parsing from=70 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=70 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=71 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 71
 possible (looking for a) observedPopToken={ parsing=[Parsing from=72 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=72
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=73 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 73
 possible (looking for a) observedPopToken=( parsing=[Parsing from=74 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=74
 possible (looking for a) observedPopToken=T parsing=[Parsing from=75 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=76 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 76
 possible (looking for a) observedPopToken=Sqrt parsing=[Parsing from=77 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Sqrt
 possible (looking for a) observedPopToken=) parsing=[Parsing from=78 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (78) and observePushToken=( (74) expectPopToken=) parsing=[Parsing from=78 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=78 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=79 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 79
 possible (looking for a) observedPopToken={ parsing=[Parsing from=80 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=80
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=81 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 81
 possible (looking for a) observedPopToken=( parsing=[Parsing from=82 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=82
 possible (looking for a) observedPopToken=T parsing=[Parsing from=83 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=84 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 84
 possible (looking for a) observedPopToken=+ parsing=[Parsing from=85 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=+
 possible (looking for a) observedPopToken=) parsing=[Parsing from=86 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (86) and observePushToken=( (82) expectPopToken=) parsing=[Parsing from=86 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=86 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=87 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 87
 possible (looking for a) observedPopToken={ parsing=[Parsing from=88 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=88
 possible (looking for a) observedPopToken=( parsing=[Parsing from=89 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=89
 possible (looking for a) observedPopToken=T parsing=[Parsing from=90 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=91 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 91
 possible (looking for a) observedPopToken=Sqr parsing=[Parsing from=92 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Sqr
 possible (looking for a) observedPopToken=) parsing=[Parsing from=93 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (93) and observePushToken=( (89) expectPopToken=) parsing=[Parsing from=93 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=93 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=94 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 94
 possible (looking for a) observedPopToken=( parsing=[Parsing from=95 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=95
 possible (looking for a) observedPopToken=P parsing=[Parsing from=96 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=P
 possible (looking for a) observedPopToken=  parsing=[Parsing from=97 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 97
 possible (looking for a) observedPopToken=x parsing=[Parsing from=98 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=x
 possible (looking for a) observedPopToken=) parsing=[Parsing from=99 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (99) and observePushToken=( (95) expectPopToken=) parsing=[Parsing from=99 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=99 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=} parsing=[Parsing from=100 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (100) and observePushToken={ (88) expectPopToken=} parsing=[Parsing from=100 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=100 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=	 parsing=[Parsing from=101 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 101
 possible (looking for a) observedPopToken={ parsing=[Parsing from=102 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=102
 possible (looking for a) observedPopToken=( parsing=[Parsing from=103 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=103
 possible (looking for a) observedPopToken=T parsing=[Parsing from=104 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=105 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 105
 possible (looking for a) observedPopToken=Sqr parsing=[Parsing from=106 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Sqr
 possible (looking for a) observedPopToken=) parsing=[Parsing from=107 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (107) and observePushToken=( (103) expectPopToken=) parsing=[Parsing from=107 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=107 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=108 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 108
 possible (looking for a) observedPopToken=( parsing=[Parsing from=109 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=109
 possible (looking for a) observedPopToken=P parsing=[Parsing from=110 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=P
 possible (looking for a) observedPopToken=  parsing=[Parsing from=111 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 111
 possible (looking for a) observedPopToken=y parsing=[Parsing from=112 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=y
 possible (looking for a) observedPopToken=) parsing=[Parsing from=113 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (113) and observePushToken=( (109) expectPopToken=) parsing=[Parsing from=113 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=113 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=} parsing=[Parsing from=114 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (114) and observePushToken={ (102) expectPopToken=} parsing=[Parsing from=114 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=114 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=} parsing=[Parsing from=115 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (115) and observePushToken={ (80) expectPopToken=} parsing=[Parsing from=115 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=115 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=} parsing=[Parsing from=116 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (116) and observePushToken={ (72) expectPopToken=} parsing=[Parsing from=116 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=116 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=117 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (117) and observePushToken=( (38) expectPopToken=) parsing=[Parsing from=117 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=117 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=118 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 118
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=119 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=119
 possible (looking for a) observedPopToken=the parsing=[Parsing from=120 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=the
 possible (looking for a) observedPopToken=  parsing=[Parsing from=121 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 121
 possible (looking for a) observedPopToken=hypotenuse parsing=[Parsing from=122 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hypotenuse
 possible (looking for a) observedPopToken=  parsing=[Parsing from=123 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 123
 possible (looking for a) observedPopToken=of parsing=[Parsing from=124 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=of
 possible (looking for a) observedPopToken=  parsing=[Parsing from=125 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 125
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=126 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=126
 possible (looking for a) observedPopToken=a parsing=[Parsing from=127 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=128 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 128
 possible (looking for a) observedPopToken=right parsing=[Parsing from=129 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=right
 possible (looking for a) observedPopToken=  parsing=[Parsing from=130 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 130
 possible (looking for a) observedPopToken=triangle parsing=[Parsing from=131 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=triangle
 possible (looking for a) observedPopToken=  parsing=[Parsing from=132 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 132
 possible (looking for a) observedPopToken=of parsing=[Parsing from=133 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=of
 possible (looking for a) observedPopToken=  parsing=[Parsing from=134 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 134
 possible (looking for a) observedPopToken=sides parsing=[Parsing from=135 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=sides
 possible (looking for a) observedPopToken=  parsing=[Parsing from=136 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 136
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=137 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=  parsing=[Parsing from=138 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 138
 possible (looking for a) observedPopToken=and parsing=[Parsing from=139 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=and
 possible (looking for a) observedPopToken=  parsing=[Parsing from=140 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 140
 possible (looking for a) observedPopToken=8 parsing=[Parsing from=141 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=8
 possible (looking for a) observedPopToken=] parsing=[Parsing from=142 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (142) and observePushToken=[ (126) expectPopToken=] parsing=[Parsing from=142 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=142 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=143 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 143
 possible (looking for a) observedPopToken=is parsing=[Parsing from=144 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=is
 possible (looking for a) observedPopToken=  parsing=[Parsing from=145 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 145
 possible (looking for a) observedPopToken=( parsing=[Parsing from=146 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=146
 possible (looking for a) observedPopToken=Hypot parsing=[Parsing from=147 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Hypot
 possible (looking for a) observedPopToken=  parsing=[Parsing from=148 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 148
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=149 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=  parsing=[Parsing from=150 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 150
 possible (looking for a) observedPopToken=8 parsing=[Parsing from=151 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=8
 possible (looking for a) observedPopToken=) parsing=[Parsing from=152 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (152) and observePushToken=( (146) expectPopToken=) parsing=[Parsing from=152 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=152 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=153 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 153
 possible (looking for a) observedPopToken=and parsing=[Parsing from=154 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=and
 possible (looking for a) observedPopToken=  parsing=[Parsing from=155 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 155
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=156 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=156
 possible (looking for a) observedPopToken=that parsing=[Parsing from=157 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=that
 possible (looking for a) observedPopToken=  parsing=[Parsing from=158 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 158
 possible (looking for a) observedPopToken=func parsing=[Parsing from=159 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=func
 possible (looking for a) observedPopToken=  parsing=[Parsing from=160 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 160
 possible (looking for a) observedPopToken=is parsing=[Parsing from=161 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=is
 possible (looking for a) observedPopToken=  parsing=[Parsing from=162 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 162
 possible (looking for a) observedPopToken=Hypot parsing=[Parsing from=163 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Hypot
 possible (looking for a) observedPopToken=] parsing=[Parsing from=164 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (164) and observePushToken=[ (156) expectPopToken=] parsing=[Parsing from=164 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=164 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=165 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 165
 possible (looking for a) observedPopToken=and parsing=[Parsing from=166 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=and
 possible (looking for a) observedPopToken=  parsing=[Parsing from=167 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 167
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=168 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=168
 possible (looking for a) observedPopToken=as parsing=[Parsing from=169 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=as
 possible (looking for a) observedPopToken=  parsing=[Parsing from=170 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 170
 possible (looking for a) observedPopToken=a parsing=[Parsing from=171 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=172 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 172
 possible (looking for a) observedPopToken=1 parsing=[Parsing from=173 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=1
 possible (looking for a) observedPopToken=  parsing=[Parsing from=174 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 174
 possible (looking for a) observedPopToken=param parsing=[Parsing from=175 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=param
 possible (looking for a) observedPopToken=  parsing=[Parsing from=176 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 176
 possible (looking for a) observedPopToken=func parsing=[Parsing from=177 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=func
 possible (looking for a) observedPopToken=  parsing=[Parsing from=178 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 178
 possible (looking for a) observedPopToken=is parsing=[Parsing from=179 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=is
 possible (looking for a) observedPopToken=  parsing=[Parsing from=180 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 180
 possible (looking for a) observedPopToken=( parsing=[Parsing from=181 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=181
 possible (looking for a) observedPopToken=Hypot parsing=[Parsing from=182 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Hypot
 possible (looking for a) observedPopToken=  parsing=[Parsing from=183 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 183
 possible (looking for a) observedPopToken=6 parsing=[Parsing from=184 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=6
 possible (looking for a) observedPopToken=) parsing=[Parsing from=185 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (185) and observePushToken=( (181) expectPopToken=) parsing=[Parsing from=185 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=185 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=186 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (186) and observePushToken=[ (168) expectPopToken=] parsing=[Parsing from=186 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=186 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=187 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (187) and observePushToken=[ (119) expectPopToken=] parsing=[Parsing from=187 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=187 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=188 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 188
 possible (looking for a) observedPopToken={ parsing=[Parsing from=189 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=189
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=190 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=190
 possible (looking for a) observedPopToken=hello parsing=[Parsing from=191 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=hello
 possible (looking for a) observedPopToken=  parsing=[Parsing from=192 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 192
 possible (looking for a) observedPopToken=world parsing=[Parsing from=193 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=world
 possible (looking for a) observedPopToken=] parsing=[Parsing from=194 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (194) and observePushToken=[ (190) expectPopToken=] parsing=[Parsing from=194 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=194 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=195 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 195
 possible (looking for a) observedPopToken={ parsing=[Parsing from=196 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken={
 Start observePushToken={ at observePushToken_tokenIndex=196
 possible (looking for a) observedPopToken=abc parsing=[Parsing from=197 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=abc
 possible (looking for a) observedPopToken=  parsing=[Parsing from=198 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 198
 possible (looking for a) observedPopToken=def parsing=[Parsing from=199 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=def
 possible (looking for a) observedPopToken=  parsing=[Parsing from=200 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 200
 possible (looking for a) observedPopToken=ghi parsing=[Parsing from=201 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=ghi
 possible (looking for a) observedPopToken=  parsing=[Parsing from=202 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 202
 possible (looking for a) observedPopToken=jkl parsing=[Parsing from=203 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=jkl
 possible (looking for a) observedPopToken=} parsing=[Parsing from=204 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (204) and observePushToken={ (196) expectPopToken=} parsing=[Parsing from=204 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=204 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=} parsing=[Parsing from=205 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: } (205) and observePushToken={ (189) expectPopToken=} parsing=[Parsing from=205 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken={ observedPopToken=} expectPopToken=} parsing=[Parsing from=205 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=206 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 206
 possible (looking for a) observedPopToken=( parsing=[Parsing from=207 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=207
 possible (looking for a) observedPopToken=U parsing=[Parsing from=208 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=  parsing=[Parsing from=209 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 209
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=210 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=211 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 211
 possible (looking for a) observedPopToken=L parsing=[Parsing from=212 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=213 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 213
 possible (looking for a) observedPopToken=U parsing=[Parsing from=214 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=  parsing=[Parsing from=215 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 215
 possible (looking for a) observedPopToken=U parsing=[Parsing from=216 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=  parsing=[Parsing from=217 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 217
 possible (looking for a) observedPopToken=S parsing=[Parsing from=218 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=S
 possible (looking for a) observedPopToken=  parsing=[Parsing from=219 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 219
 possible (looking for a) observedPopToken=U parsing=[Parsing from=220 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=U
 possible (looking for a) observedPopToken=) parsing=[Parsing from=221 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (221) and observePushToken=( (207) expectPopToken=) parsing=[Parsing from=221 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=221 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=222 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 222
 possible (looking for a) observedPopToken=( parsing=[Parsing from=223 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=223
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=224 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=225 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 225
 possible (looking for a) observedPopToken=L parsing=[Parsing from=226 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=227 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 227
 possible (looking for a) observedPopToken=R parsing=[Parsing from=228 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=) parsing=[Parsing from=229 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (229) and observePushToken=( (223) expectPopToken=) parsing=[Parsing from=229 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=229 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=230 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 230
 possible (looking for a) observedPopToken=( parsing=[Parsing from=231 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=231
 possible (looking for a) observedPopToken=T parsing=[Parsing from=232 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=233 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 233
 possible (looking for a) observedPopToken=( parsing=[Parsing from=234 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=234
 possible (looking for a) observedPopToken=Pair parsing=[Parsing from=235 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Pair
 possible (looking for a) observedPopToken=  parsing=[Parsing from=236 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 236
 possible (looking for a) observedPopToken=( parsing=[Parsing from=237 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=(
 Start observePushToken=( at observePushToken_tokenIndex=237
 possible (looking for a) observedPopToken=T parsing=[Parsing from=238 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=239 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 239
 possible (looking for a) observedPopToken=L parsing=[Parsing from=240 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=) parsing=[Parsing from=241 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (241) and observePushToken=( (237) expectPopToken=) parsing=[Parsing from=241 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=241 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=  parsing=[Parsing from=242 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 242
 possible (looking for a) observedPopToken=R parsing=[Parsing from=243 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=) parsing=[Parsing from=244 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (244) and observePushToken=( (234) expectPopToken=) parsing=[Parsing from=244 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=244 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=245 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (245) and observePushToken=( (231) expectPopToken=) parsing=[Parsing from=245 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=245 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=246 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 246
 possible (looking for a) observedPopToken=2.34 parsing=[Parsing from=247 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=2.34
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=248 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 248
 possible (looking for a) observedPopToken=Em# parsing=[Parsing from=249 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Em#
 Start observePushToken=( at observePushToken_tokenIndex=250
 possible (looking for a) observedPopToken=EmptyTreemap parsing=[Parsing from=251 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=EmptyTreemap
 possible (looking for a) observedPopToken=  parsing=[Parsing from=252 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 252
 possible (looking for a) observedPopToken=GodelLessThan parsing=[Parsing from=253 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=GodelLessThan
 possible (looking for a) observedPopToken=) parsing=[Parsing from=254 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (254) and observePushToken=( (250) expectPopToken=) parsing=[Parsing from=254 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=254 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=255 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 255
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=256 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=256
 possible (looking for a) observedPopToken=L parsing=[Parsing from=257 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=L
 possible (looking for a) observedPopToken=  parsing=[Parsing from=258 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 258
 possible (looking for a) observedPopToken=R parsing=[Parsing from=259 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=R
 possible (looking for a) observedPopToken=  parsing=[Parsing from=260 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 260
 possible (looking for a) observedPopToken=S parsing=[Parsing from=261 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=S
 possible (looking for a) observedPopToken=  parsing=[Parsing from=262 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 262
 possible (looking for a) observedPopToken=T parsing=[Parsing from=263 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=T
 possible (looking for a) observedPopToken=  parsing=[Parsing from=264 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 264
 possible (looking for a) observedPopToken=Isleaf parsing=[Parsing from=265 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Isleaf
 possible (looking for a) observedPopToken=  parsing=[Parsing from=266 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 266
 possible (looking for a) observedPopToken=PutNoBal parsing=[Parsing from=267 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=PutNoBal
 possible (looking for a) observedPopToken=  parsing=[Parsing from=268 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 268
 possible (looking for a) observedPopToken=Del parsing=[Parsing from=269 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Del
 possible (looking for a) observedPopToken=  parsing=[Parsing from=270 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 270
 possible (looking for a) observedPopToken=Fo parsing=[Parsing from=271 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=Fo
 possible (looking for a) observedPopToken=  parsing=[Parsing from=272 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 272
 possible (looking for a) observedPopToken=DoAvlBal parsing=[Parsing from=273 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=DoAvlBal
 possible (looking for a) observedPopToken=  parsing=[Parsing from=274 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 274
 possible (looking for a) observedPopToken=VarargAx parsing=[Parsing from=275 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=VarargAx
 possible (looking for a) observedPopToken=] parsing=[Parsing from=276 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (276) and observePushToken=[ (256) expectPopToken=] parsing=[Parsing from=276 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=276 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=
 parsing=[Parsing from=277 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 277
 possible (looking for a) observedPopToken=[ parsing=[Parsing from=278 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=[
 Start observePushToken=[ at observePushToken_tokenIndex=278
 possible (looking for a) observedPopToken=a parsing=[Parsing from=279 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=a
 possible (looking for a) observedPopToken=  parsing=[Parsing from=280 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 280
 possible (looking for a) observedPopToken=b parsing=[Parsing from=281 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=b
 possible (looking for a) observedPopToken=  parsing=[Parsing from=282 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 282
 possible (looking for a) observedPopToken=c parsing=[Parsing from=283 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=c
 possible (looking for a) observedPopToken=  parsing=[Parsing from=284 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 284
 possible (looking for a) observedPopToken=d parsing=[Parsing from=285 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=d
 possible (looking for a) observedPopToken=  parsing=[Parsing from=286 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 286
 possible (looking for a) observedPopToken=e parsing=[Parsing from=287 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=e
 possible (looking for a) observedPopToken=  parsing=[Parsing from=288 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 288
 possible (looking for a) observedPopToken=f parsing=[Parsing from=289 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=f
 possible (looking for a) observedPopToken=  parsing=[Parsing from=290 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 290
 possible (looking for a) observedPopToken=g parsing=[Parsing from=291 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=g
 possible (looking for a) observedPopToken=  parsing=[Parsing from=292 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 292
 possible (looking for a) observedPopToken=h parsing=[Parsing from=293 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=h
 possible (looking for a) observedPopToken=  parsing=[Parsing from=294 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 294
 possible (looking for a) observedPopToken=i parsing=[Parsing from=295 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=i
 possible (looking for a) observedPopToken=  parsing=[Parsing from=296 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 296
 possible (looking for a) observedPopToken=j parsing=[Parsing from=297 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=j
 possible (looking for a) observedPopToken=  parsing=[Parsing from=298 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 298
 possible (looking for a) observedPopToken=k parsing=[Parsing from=299 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=k
 possible (looking for a) observedPopToken=  parsing=[Parsing from=300 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 300
 possible (looking for a) observedPopToken=l parsing=[Parsing from=301 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=l
 possible (looking for a) observedPopToken=  parsing=[Parsing from=302 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 302
 possible (looking for a) observedPopToken=m parsing=[Parsing from=303 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=m
 possible (looking for a) observedPopToken=  parsing=[Parsing from=304 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 304
 possible (looking for a) observedPopToken=n parsing=[Parsing from=305 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=n
 possible (looking for a) observedPopToken=  parsing=[Parsing from=306 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 306
 possible (looking for a) observedPopToken=o parsing=[Parsing from=307 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=o
 possible (looking for a) observedPopToken=  parsing=[Parsing from=308 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 skipping whitespace at index 308
 possible (looking for a) observedPopToken=p parsing=[Parsing from=309 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 tokensToParseTree firstToken=p
 possible (looking for a) observedPopToken=] parsing=[Parsing from=310 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (310) and observePushToken=[ (278) expectPopToken=] parsing=[Parsing from=310 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=310 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=311 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (311) and observePushToken=[ (15) expectPopToken=] parsing=[Parsing from=311 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=311 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=312 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (312) and observePushToken=[ (14) expectPopToken=] parsing=[Parsing from=312 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=312 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=313 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (313) and observePushToken=[ (13) expectPopToken=] parsing=[Parsing from=313 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=313 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=314 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (314) and observePushToken=( (2) expectPopToken=) parsing=[Parsing from=314 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=314 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=] parsing=[Parsing from=315 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ] (315) and observePushToken=[ (1) expectPopToken=] parsing=[Parsing from=315 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=315 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 possible (looking for a) observedPopToken=) parsing=[Parsing from=316 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 break while cuz, observedPopToken is a pop token: ) (316) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=316 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=316 toExcl=0 toklen=317 stacklen=1 tokens=["(","[","(","(","Pair"," ","[","L"," ","R","]",")"," ","[","[","[","\n","I#","(","F"," ","U",")","\n","Sqr#","{","(","T"," ","*",")"," ","I"," ","I","}","\n","Hypot#","(","\t","λ"," ","[","x"," ","y","]","\t","[","this"," ","is"," ","[","a"," ","comment","]"," ","with"," ","a"," ","function"," ","Sqr"," ","in"," ","it","]","\t","{","\t","(","T"," ","Sqrt",")","\t","{","\t","(","T"," ","+",")","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","x",")","}","\t","{","(","T"," ","Sqr",")"," ","(","P"," ","y",")","}","}","}",")","\n","[","the"," ","hypotenuse"," ","of"," ","[","a"," ","right"," ","triangle"," ","of"," ","sides"," ","6"," ","and"," ","8","]"," ","is"," ","(","Hypot"," ","6"," ","8",")"," ","and"," ","[","that"," ","func"," ","is"," ","Hypot","]"," ","and"," ","[","as"," ","a"," ","1"," ","param"," ","func"," ","is"," ","(","Hypot"," ","6",")","]","]","\n","{","[","hello"," ","world","]"," ","{","abc"," ","def"," ","ghi"," ","jkl","}","}","\n","(","U"," ","Pair"," ","L"," ","U"," ","U"," ","S"," ","U",")","\n","(","Pair"," ","L"," ","R",")","\n","(","T"," ","(","Pair"," ","(","T"," ","L",")"," ","R",")",")","\n","2.34","\n","Em#","(","EmptyTreemap"," ","GodelLessThan",")","\n","[","L"," ","R"," ","S"," ","T"," ","Isleaf"," ","PutNoBal"," ","Del"," ","Fo"," ","DoAvlBal"," ","VarargAx","]","\n","[","a"," ","b"," ","c"," ","d"," ","e"," ","f"," ","g"," ","h"," ","i"," ","j"," ","k"," ","l"," ","m"," ","n"," ","o"," ","p","]","]","]","]",")","]",")"] maxParseSteps=0]
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): x
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): y
 Wrapping string of 1 chars
 about to set curriesLeft. op=145
 Lambda getting its 7th param a [], curriesLeft=4 paramsListSize=2
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): this
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): is
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): comment
 Wrapping string of 7 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): with
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): function
 Wrapping string of 8 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): in
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): it
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): x
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): y
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): the
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hypotenuse
 Wrapping string of 10 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): of
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): right
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): triangle
 Wrapping string of 8 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): of
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): sides
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): and
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 8
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): is
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 8
 node.p Lambda name=x val=6
 node.p [] name=y val=8
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): and
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): that
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): func
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): is
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): and
 Wrapping string of 3 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): as
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
 Wrapping string of 1 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 1
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): param
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): func
 Wrapping string of 4 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): is
 Wrapping string of 2 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 6
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): hello
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): world
 Wrapping string of 5 chars
 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): abc
Wikibinator203VM.js:3563 Wrapping string of 3 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): def
Wikibinator203VM.js:3563 Wrapping string of 3 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): ghi
Wikibinator203VM.js:3563 Wrapping string of 3 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): jkl
Wikibinator203VM.js:3563 Wrapping string of 3 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 2.34
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): a
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): b
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): c
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): d
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): e
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): f
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): g
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): h
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): i
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): j
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): k
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): l
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): m
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): n
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): o
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): p
Wikibinator203VM.js:3563 Wrapping string of 1 chars
Wikibinator203VM.js:10457 tokensToParseTree firstToken=(
Wikibinator203VM.js:10485 Start observePushToken=( at observePushToken_tokenIndex=0
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=[ parsing=[Parsing from=1 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=[
Wikibinator203VM.js:10485 Start observePushToken=[ at observePushToken_tokenIndex=1
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=for parsing=[Parsing from=2 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=for
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=3 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 3
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=testing parsing=[Parsing from=4 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=testing
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=5 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 5
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=action parsing=[Parsing from=6 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=action
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=  parsing=[Parsing from=7 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10512 skipping whitespace at index 7
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=3.456 parsing=[Parsing from=8 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10457 tokensToParseTree firstToken=3.456
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=] parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ] (9) and observePushToken=[ (1) expectPopToken=] parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=[ observedPopToken=] expectPopToken=] parsing=[Parsing from=9 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10498 possible (looking for a) observedPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10507 break while cuz, observedPopToken is a pop token: ) (10) and observePushToken=( (0) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10524 end loop, observePushToken=( observedPopToken=) expectPopToken=) parsing=[Parsing from=10 toExcl=0 toklen=11 stacklen=1 tokens=["(","[","for"," ","testing"," ","action"," ","3.456","]",")"] maxParseSteps=0]
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): for
Wikibinator203VM.js:3563 Wrapping string of 3 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): testing
Wikibinator203VM.js:3563 Wrapping string of 7 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): action
Wikibinator203VM.js:3563 Wrapping string of 6 chars
Wikibinator203VM.js:10872 Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): 3.456
Wikibinator203DragAndDropTree.html:1678 FIXME add all state thats in splat and selSplat etc, including:
	isSelected, and some form of color.
	Use splate as immutable, and add a Splat.setSpit(split) func that instantly updates dobs.
	and I want a splat editor.
	then make all parts of code appear.
	then fix the display so its like (	(	{	[.
	then add drag and drop.
Wikibinator203DragAndDropTree.html:6932 Created rootSplat=[Splat splate=[Splate syty=U isOpen=false isOneLine=false isLiteral=false isDisplayPushAndPopChars=false isDisplayChilds=false isFoldL=false isUnary=false isDisplayName=true name=U isDisplayIcon=false looseIconYFraction=0.5 looseIconXFraction=0.5 linePath= dragStep=TODORemoveDragStepFromSplate]__fn=U isSelected=false] and about to make a Split and rootSplat.setSplit to display it